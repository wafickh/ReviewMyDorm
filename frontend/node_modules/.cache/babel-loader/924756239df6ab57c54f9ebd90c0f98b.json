{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\OneDrive\\\\Desktop\\\\WebCourse\\\\DormCritique\\\\frontend\\\\src\\\\pages\\\\test\\\\test.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nfunction Test() {\n  const [cars, setCars] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalCars, setTotalCars] = useState(0);\n  const [pageSize] = useState(2); // Number of cars to display per page\n\n  const [sortOptions, setSortOptions] = useState([]); // Array to store selected sort options\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get('/api/dorms/', {\n        params: {\n          page: currentPage,\n          pageSize,\n          sortBy: sortOptions.join(',') // Pass comma-separated string of selected sort options\n\n        }\n      });\n      setCars(response.data.cars);\n      setTotalCars(response.data.totalCars);\n    } catch (error) {\n      console.error('Failed to fetch cars:', error);\n    }\n  };\n\n  const handleSortChange = event => {\n    const {\n      value,\n      checked\n    } = event.target;\n\n    if (checked) {\n      // Add selected sort option to the array\n      setSortOptions(prevSortOptions => [...prevSortOptions, value]);\n    } else {\n      // Remove deselected sort option from the array\n      setSortOptions(prevSortOptions => prevSortOptions.filter(option => option !== value));\n    }\n\n    setCurrentPage(1); // Reset page number when changing sort options\n  };\n\n  const handlePageChange = pageNumber => {\n    setCurrentPage(pageNumber);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [currentPage, sortOptions]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    value: \"Rating\",\n    checked: sortOptions.includes('Rating'),\n    onChange: handleSortChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }), \"Sort by Color\"), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    value: \"model\",\n    checked: sortOptions.includes('model'),\n    onChange: handleSortChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 21\n    }\n  }), \"Sort by Model\"), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    value: \"name\",\n    checked: sortOptions.includes('name'),\n    onChange: handleSortChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  }), \"Sort by Name\"), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    value: \"year\",\n    checked: sortOptions.includes('year'),\n    onChange: handleSortChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  }), \"Sort by Year\"), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    value: \"type\",\n    checked: sortOptions.includes('type'),\n    onChange: handleSortChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }\n  }), \"Sort by Type\")), /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 25\n    }\n  }, \"ID\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 25\n    }\n  }, \"Model\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 25\n    }\n  }, \"Color\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }, cars.map(car => /*#__PURE__*/React.createElement(\"tr\", {\n    key: car.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 29\n    }\n  }, car.id), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 29\n    }\n  }, car.model), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 29\n    }\n  }, car.color))))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    disabled: currentPage === 1,\n    onClick: () => handlePageChange(currentPage - 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, \"Previous\"), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: currentPage * pageSize >= totalCars,\n    onClick: () => handlePageChange(currentPage + 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }, \"Next\")));\n}\n\nexport default Test;","map":{"version":3,"sources":["C:/Users/USER/OneDrive/Desktop/WebCourse/DormCritique/frontend/src/pages/test/test.jsx"],"names":["React","useEffect","useState","axios","Test","cars","setCars","currentPage","setCurrentPage","totalCars","setTotalCars","pageSize","sortOptions","setSortOptions","fetchData","response","get","params","page","sortBy","join","data","error","console","handleSortChange","event","value","checked","target","prevSortOptions","filter","option","handlePageChange","pageNumber","includes","map","car","id","model","color"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\n\r\nfunction Test() {\r\n    const [cars, setCars] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [totalCars, setTotalCars] = useState(0);\r\n    const [pageSize] = useState(2); // Number of cars to display per page\r\n    const [sortOptions, setSortOptions] = useState([]); // Array to store selected sort options\r\n\r\n\r\n\r\n    const fetchData = async () => {\r\n        try {\r\n            const response = await axios.get('/api/dorms/', {\r\n                params: {\r\n                    page: currentPage,\r\n                    pageSize,\r\n                    sortBy: sortOptions.join(','), // Pass comma-separated string of selected sort options\r\n                },\r\n            });\r\n\r\n            setCars(response.data.cars);\r\n            setTotalCars(response.data.totalCars);\r\n        } catch (error) {\r\n            console.error('Failed to fetch cars:', error);\r\n        }\r\n    };\r\n\r\n    const handleSortChange = (event) => {\r\n        const { value, checked } = event.target;\r\n\r\n        if (checked) {\r\n            // Add selected sort option to the array\r\n            setSortOptions((prevSortOptions) => [...prevSortOptions, value]);\r\n        } else {\r\n            // Remove deselected sort option from the array\r\n            setSortOptions((prevSortOptions) =>\r\n                prevSortOptions.filter((option) => option !== value)\r\n            );\r\n        }\r\n\r\n        setCurrentPage(1); // Reset page number when changing sort options\r\n    };\r\n\r\n    const handlePageChange = (pageNumber) => {\r\n        setCurrentPage(pageNumber);\r\n    };\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, [currentPage, sortOptions]);\r\n    return (\r\n        <div>\r\n            <div>\r\n                <label>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        value=\"Rating\"\r\n                        checked={sortOptions.includes('Rating')}\r\n                        onChange={handleSortChange}\r\n                    />\r\n                    Sort by Color\r\n                </label>\r\n                <label>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        value=\"model\"\r\n                        checked={sortOptions.includes('model')}\r\n                        onChange={handleSortChange}\r\n                    />\r\n                    Sort by Model\r\n                </label>\r\n                <label>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        value=\"name\"\r\n                        checked={sortOptions.includes('name')}\r\n                        onChange={handleSortChange}\r\n                    />\r\n                    Sort by Name\r\n                </label>\r\n                <label>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        value=\"year\"\r\n                        checked={sortOptions.includes('year')}\r\n                        onChange={handleSortChange}\r\n                    />\r\n                    Sort by Year\r\n                </label>\r\n                <label>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        value=\"type\"\r\n                        checked={sortOptions.includes('type')}\r\n                        onChange={handleSortChange}\r\n                    />\r\n                    Sort by Type\r\n                </label>\r\n            </div>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>ID</th>\r\n                        <th>Model</th>\r\n                        <th>Color</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {cars.map((car) => (\r\n                        <tr key={car.id}>\r\n                            <td>{car.id}</td>\r\n                            <td>{car.model}</td>\r\n                            <td>{car.color}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n            <div>\r\n                <button\r\n                    disabled={currentPage === 1}\r\n                    onClick={() => handlePageChange(currentPage - 1)}\r\n                >\r\n                    Previous\r\n                </button>\r\n                <button\r\n                    disabled={currentPage * pageSize >= totalCars}\r\n                    onClick={() => handlePageChange(currentPage + 1)}\r\n                >\r\n                    Next\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Test\r\n"]},"metadata":{},"sourceType":"module"}