{"ast":null,"code":"import { useContext, useEffect, useMemo, useState, useRef } from 'react';\nimport { MapContext } from './map';\nimport assert from '../utils/assert';\nimport { deepEqual } from '../utils/deep-equal';\n/* eslint-disable complexity, max-statements */\n\nfunction updateLayer(map, id, props, prevProps) {\n  assert(props.id === prevProps.id, 'layer id changed');\n  assert(props.type === prevProps.type, 'layer type changed');\n\n  if (props.type === 'custom' || prevProps.type === 'custom') {\n    return;\n  }\n\n  const {\n    layout = {},\n    paint = {},\n    filter,\n    minzoom,\n    maxzoom,\n    beforeId\n  } = props;\n\n  if (beforeId !== prevProps.beforeId) {\n    map.moveLayer(id, beforeId);\n  }\n\n  if (layout !== prevProps.layout) {\n    const prevLayout = prevProps.layout || {};\n\n    for (const key in layout) {\n      if (!deepEqual(layout[key], prevLayout[key])) {\n        map.setLayoutProperty(id, key, layout[key]);\n      }\n    }\n\n    for (const key in prevLayout) {\n      if (!layout.hasOwnProperty(key)) {\n        map.setLayoutProperty(id, key, undefined);\n      }\n    }\n  }\n\n  if (paint !== prevProps.paint) {\n    const prevPaint = prevProps.paint || {};\n\n    for (const key in paint) {\n      if (!deepEqual(paint[key], prevPaint[key])) {\n        map.setPaintProperty(id, key, paint[key]);\n      }\n    }\n\n    for (const key in prevPaint) {\n      if (!paint.hasOwnProperty(key)) {\n        map.setPaintProperty(id, key, undefined);\n      }\n    }\n  }\n\n  if (!deepEqual(filter, prevProps.filter)) {\n    map.setFilter(id, filter);\n  }\n\n  if (minzoom !== prevProps.minzoom || maxzoom !== prevProps.maxzoom) {\n    map.setLayerZoomRange(id, minzoom, maxzoom);\n  }\n}\n\nfunction createLayer(map, id, props) {\n  // @ts-ignore\n  if (map.style && map.style._loaded && (!('source' in props) || map.getSource(props.source))) {\n    const options = { ...props,\n      id\n    };\n    delete options.beforeId; // @ts-ignore\n\n    map.addLayer(options, props.beforeId);\n  }\n}\n/* eslint-enable complexity, max-statements */\n\n\nlet layerCounter = 0;\n\nfunction Layer(props) {\n  const map = useContext(MapContext).map.getMap();\n  const propsRef = useRef(props);\n  const [, setStyleLoaded] = useState(0);\n  const id = useMemo(() => props.id || `jsx-layer-${layerCounter++}`, []);\n  useEffect(() => {\n    if (map) {\n      const forceUpdate = () => setStyleLoaded(version => version + 1);\n\n      map.on('styledata', forceUpdate);\n      forceUpdate();\n      return () => {\n        map.off('styledata', forceUpdate); // @ts-ignore\n\n        if (map.style && map.style._loaded && map.getLayer(id)) {\n          map.removeLayer(id);\n        }\n      };\n    }\n\n    return undefined;\n  }, [map]); // @ts-ignore\n\n  const layer = map && map.style && map.getLayer(id);\n\n  if (layer) {\n    try {\n      updateLayer(map, id, props, propsRef.current);\n    } catch (error) {\n      console.warn(error); // eslint-disable-line\n    }\n  } else {\n    createLayer(map, id, props);\n  } // Store last rendered props\n\n\n  propsRef.current = props;\n  return null;\n}\n\nexport default Layer;","map":{"version":3,"sources":["../../../src/components/layer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { useContext, useEffect, useMemo, useState, useRef } from 'react';\nimport { MapContext } from './map';\nimport assert from '../utils/assert';\nimport { deepEqual } from '../utils/deep-equal';\n/* eslint-disable complexity, max-statements */\nfunction updateLayer(map, id, props, prevProps) {\n    assert(props.id === prevProps.id, 'layer id changed');\n    assert(props.type === prevProps.type, 'layer type changed');\n    if (props.type === 'custom' || prevProps.type === 'custom') {\n        return;\n    }\n    const { layout = {}, paint = {}, filter, minzoom, maxzoom, beforeId } = props;\n    if (beforeId !== prevProps.beforeId) {\n        map.moveLayer(id, beforeId);\n    }\n    if (layout !== prevProps.layout) {\n        const prevLayout = prevProps.layout || {};\n        for (const key in layout) {\n            if (!deepEqual(layout[key], prevLayout[key])) {\n                map.setLayoutProperty(id, key, layout[key]);\n            }\n        }\n        for (const key in prevLayout) {\n            if (!layout.hasOwnProperty(key)) {\n                map.setLayoutProperty(id, key, undefined);\n            }\n        }\n    }\n    if (paint !== prevProps.paint) {\n        const prevPaint = prevProps.paint || {};\n        for (const key in paint) {\n            if (!deepEqual(paint[key], prevPaint[key])) {\n                map.setPaintProperty(id, key, paint[key]);\n            }\n        }\n        for (const key in prevPaint) {\n            if (!paint.hasOwnProperty(key)) {\n                map.setPaintProperty(id, key, undefined);\n            }\n        }\n    }\n    if (!deepEqual(filter, prevProps.filter)) {\n        map.setFilter(id, filter);\n    }\n    if (minzoom !== prevProps.minzoom || maxzoom !== prevProps.maxzoom) {\n        map.setLayerZoomRange(id, minzoom, maxzoom);\n    }\n}\nfunction createLayer(map, id, props) {\n    // @ts-ignore\n    if (map.style && map.style._loaded && (!('source' in props) || map.getSource(props.source))) {\n        const options = { ...props, id };\n        delete options.beforeId;\n        // @ts-ignore\n        map.addLayer(options, props.beforeId);\n    }\n}\n/* eslint-enable complexity, max-statements */\nlet layerCounter = 0;\nfunction Layer(props) {\n    const map = useContext(MapContext).map.getMap();\n    const propsRef = useRef(props);\n    const [, setStyleLoaded] = useState(0);\n    const id = useMemo(() => props.id || `jsx-layer-${layerCounter++}`, []);\n    useEffect(() => {\n        if (map) {\n            const forceUpdate = () => setStyleLoaded(version => version + 1);\n            map.on('styledata', forceUpdate);\n            forceUpdate();\n            return () => {\n                map.off('styledata', forceUpdate);\n                // @ts-ignore\n                if (map.style && map.style._loaded && map.getLayer(id)) {\n                    map.removeLayer(id);\n                }\n            };\n        }\n        return undefined;\n    }, [map]);\n    // @ts-ignore\n    const layer = map && map.style && map.getLayer(id);\n    if (layer) {\n        try {\n            updateLayer(map, id, props, propsRef.current);\n        }\n        catch (error) {\n            console.warn(error); // eslint-disable-line\n        }\n    }\n    else {\n        createLayer(map, id, props);\n    }\n    // Store last rendered props\n    propsRef.current = props;\n    return null;\n}\nexport default Layer;\n//# sourceMappingURL=layer.js.map"]},"metadata":{},"sourceType":"module"}