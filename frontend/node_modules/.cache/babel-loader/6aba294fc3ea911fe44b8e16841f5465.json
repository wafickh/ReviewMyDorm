{"ast":null,"code":"/*!\n  * Bootstrap manipulator.js v5.2.3 (https://getbootstrap.com/)\n  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Manipulator = factory());\n})(this, function () {\n  'use strict';\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): dom/manipulator.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  function normalizeData(value) {\n    if (value === 'true') {\n      return true;\n    }\n\n    if (value === 'false') {\n      return false;\n    }\n\n    if (value === Number(value).toString()) {\n      return Number(value);\n    }\n\n    if (value === '' || value === 'null') {\n      return null;\n    }\n\n    if (typeof value !== 'string') {\n      return value;\n    }\n\n    try {\n      return JSON.parse(decodeURIComponent(value));\n    } catch (_unused) {\n      return value;\n    }\n  }\n\n  function normalizeDataKey(key) {\n    return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`);\n  }\n\n  const Manipulator = {\n    setDataAttribute(element, key, value) {\n      element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value);\n    },\n\n    removeDataAttribute(element, key) {\n      element.removeAttribute(`data-bs-${normalizeDataKey(key)}`);\n    },\n\n    getDataAttributes(element) {\n      if (!element) {\n        return {};\n      }\n\n      const attributes = {};\n      const bsKeys = Object.keys(element.dataset).filter(key => key.startsWith('bs') && !key.startsWith('bsConfig'));\n\n      for (const key of bsKeys) {\n        let pureKey = key.replace(/^bs/, '');\n        pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);\n        attributes[pureKey] = normalizeData(element.dataset[key]);\n      }\n\n      return attributes;\n    },\n\n    getDataAttribute(element, key) {\n      return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`));\n    }\n\n  };\n  return Manipulator;\n});","map":{"version":3,"sources":["../../src/dom/manipulator.js"],"names":["value","Number","JSON","decodeURIComponent","key","chr","Manipulator","setDataAttribute","element","normalizeDataKey","removeDataAttribute","getDataAttributes","attributes","bsKeys","Object","pureKey","normalizeData","getDataAttribute"],"mappings":";;;;;;;;;AAAA;;;;;;;AAOA,WAAA,aAAA,CAAA,KAAA,EAA8B;AAC5B,QAAIA,KAAK,KAAT,MAAA,EAAsB;AACpB,aAAA,IAAA;AACD;;AAED,QAAIA,KAAK,KAAT,OAAA,EAAuB;AACrB,aAAA,KAAA;AACD;;AAED,QAAIA,KAAK,KAAKC,MAAM,CAANA,KAAM,CAANA,CAAd,QAAcA,EAAd,EAAwC;AACtC,aAAOA,MAAM,CAAb,KAAa,CAAb;AACD;;AAED,QAAID,KAAK,KAALA,EAAAA,IAAgBA,KAAK,KAAzB,MAAA,EAAsC;AACpC,aAAA,IAAA;AACD;;AAED,QAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AAC7B,aAAA,KAAA;AACD;;AAED,QAAI;AACF,aAAOE,IAAI,CAAJA,KAAAA,CAAWC,kBAAkB,CAApC,KAAoC,CAA7BD,CAAP;AADF,KAAA,CAEE,OAAM,OAAN,EAAM;AACN,aAAA,KAAA;AACD;AACF;;AAED,WAAA,gBAAA,CAAA,GAAA,EAA+B;AAC7B,WAAOE,GAAG,CAAHA,OAAAA,CAAAA,QAAAA,EAAsBC,GAAG,IAAK,IAAGA,GAAG,CAAHA,WAAAA,EAAxC,EAAOD,CAAP;AACD;;AAED,QAAME,WAAW,GAAG;AAClBC,IAAAA,gBAAgB,CAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAsB;AACpCC,MAAAA,OAAO,CAAPA,YAAAA,CAAgCC,WAAAA,gBAAgB,CAAA,GAAA,CAAhDD,EAAAA,EAAAA,KAAAA;AAFgB,KAAA;;AAKlBE,IAAAA,mBAAmB,CAAA,OAAA,EAAA,GAAA,EAAe;AAChCF,MAAAA,OAAO,CAAPA,eAAAA,CAAyB,WAAUC,gBAAgB,CAAA,GAAA,CAAnDD,EAAAA;AANgB,KAAA;;AASlBG,IAAAA,iBAAiB,CAAA,OAAA,EAAU;AACzB,UAAI,CAAJ,OAAA,EAAc;AACZ,eAAA,EAAA;AACD;;AAED,YAAMC,UAAU,GAAhB,EAAA;AACA,YAAMC,MAAM,GAAGC,MAAM,CAANA,IAAAA,CAAYN,OAAO,CAAnBM,OAAAA,EAAAA,MAAAA,CAAoCV,GAAG,IAAIA,GAAG,CAAHA,UAAAA,CAAAA,IAAAA,KAAwB,CAACA,GAAG,CAAHA,UAAAA,CAAnF,UAAmFA,CAApEU,CAAf;;AAEA,WAAK,MAAL,GAAA,IAAA,MAAA,EAA0B;AACxB,YAAIC,OAAO,GAAGX,GAAG,CAAHA,OAAAA,CAAAA,KAAAA,EAAd,EAAcA,CAAd;AACAW,QAAAA,OAAO,GAAGA,OAAO,CAAPA,MAAAA,CAAAA,CAAAA,EAAAA,WAAAA,KAAkCA,OAAO,CAAPA,KAAAA,CAAAA,CAAAA,EAAiBA,OAAO,CAApEA,MAA4CA,CAA5CA;AACAH,QAAAA,UAAU,CAAVA,OAAU,CAAVA,GAAsBI,aAAa,CAACR,OAAO,CAAPA,OAAAA,CAApCI,GAAoCJ,CAAD,CAAnCI;AACD;;AAED,aAAA,UAAA;AAvBgB,KAAA;;AA0BlBK,IAAAA,gBAAgB,CAAA,OAAA,EAAA,GAAA,EAAe;AAC7B,aAAOD,aAAa,CAACR,OAAO,CAAPA,YAAAA,CAAgCC,WAAAA,gBAAgB,CAAA,GAAA,CAArE,EAAqBD,CAAD,CAApB;AACD;;AA5BiB,GAApB","sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.3): dom/manipulator.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nfunction normalizeData(value) {\n  if (value === 'true') {\n    return true\n  }\n\n  if (value === 'false') {\n    return false\n  }\n\n  if (value === Number(value).toString()) {\n    return Number(value)\n  }\n\n  if (value === '' || value === 'null') {\n    return null\n  }\n\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  try {\n    return JSON.parse(decodeURIComponent(value))\n  } catch {\n    return value\n  }\n}\n\nfunction normalizeDataKey(key) {\n  return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`)\n}\n\nconst Manipulator = {\n  setDataAttribute(element, key, value) {\n    element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value)\n  },\n\n  removeDataAttribute(element, key) {\n    element.removeAttribute(`data-bs-${normalizeDataKey(key)}`)\n  },\n\n  getDataAttributes(element) {\n    if (!element) {\n      return {}\n    }\n\n    const attributes = {}\n    const bsKeys = Object.keys(element.dataset).filter(key => key.startsWith('bs') && !key.startsWith('bsConfig'))\n\n    for (const key of bsKeys) {\n      let pureKey = key.replace(/^bs/, '')\n      pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length)\n      attributes[pureKey] = normalizeData(element.dataset[key])\n    }\n\n    return attributes\n  },\n\n  getDataAttribute(element, key) {\n    return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`))\n  }\n}\n\nexport default Manipulator\n"]},"metadata":{},"sourceType":"script"}