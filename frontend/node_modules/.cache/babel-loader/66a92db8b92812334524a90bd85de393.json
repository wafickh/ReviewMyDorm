{"ast":null,"code":"/*!\n  * Bootstrap focustrap.js v5.2.3 (https://getbootstrap.com/)\n  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('../dom/event-handler'), require('../dom/selector-engine'), require('./config')) : typeof define === 'function' && define.amd ? define(['../dom/event-handler', '../dom/selector-engine', './config'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Focustrap = factory(global.EventHandler, global.SelectorEngine, global.Config));\n})(this, function (EventHandler, SelectorEngine, Config) {\n  'use strict';\n\n  const _interopDefaultLegacy = e => e && typeof e === 'object' && 'default' in e ? e : {\n    default: e\n  };\n\n  const EventHandler__default = /*#__PURE__*/_interopDefaultLegacy(EventHandler);\n\n  const SelectorEngine__default = /*#__PURE__*/_interopDefaultLegacy(SelectorEngine);\n\n  const Config__default = /*#__PURE__*/_interopDefaultLegacy(Config);\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): util/focustrap.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * Constants\n   */\n\n\n  const NAME = 'focustrap';\n  const DATA_KEY = 'bs.focustrap';\n  const EVENT_KEY = `.${DATA_KEY}`;\n  const EVENT_FOCUSIN = `focusin${EVENT_KEY}`;\n  const EVENT_KEYDOWN_TAB = `keydown.tab${EVENT_KEY}`;\n  const TAB_KEY = 'Tab';\n  const TAB_NAV_FORWARD = 'forward';\n  const TAB_NAV_BACKWARD = 'backward';\n  const Default = {\n    autofocus: true,\n    trapElement: null // The element to trap focus inside of\n\n  };\n  const DefaultType = {\n    autofocus: 'boolean',\n    trapElement: 'element'\n  };\n  /**\n   * Class definition\n   */\n\n  class FocusTrap extends Config__default.default {\n    constructor(config) {\n      super();\n      this._config = this._getConfig(config);\n      this._isActive = false;\n      this._lastTabNavDirection = null;\n    } // Getters\n\n\n    static get Default() {\n      return Default;\n    }\n\n    static get DefaultType() {\n      return DefaultType;\n    }\n\n    static get NAME() {\n      return NAME;\n    } // Public\n\n\n    activate() {\n      if (this._isActive) {\n        return;\n      }\n\n      if (this._config.autofocus) {\n        this._config.trapElement.focus();\n      }\n\n      EventHandler__default.default.off(document, EVENT_KEY); // guard against infinite focus loop\n\n      EventHandler__default.default.on(document, EVENT_FOCUSIN, event => this._handleFocusin(event));\n      EventHandler__default.default.on(document, EVENT_KEYDOWN_TAB, event => this._handleKeydown(event));\n      this._isActive = true;\n    }\n\n    deactivate() {\n      if (!this._isActive) {\n        return;\n      }\n\n      this._isActive = false;\n      EventHandler__default.default.off(document, EVENT_KEY);\n    } // Private\n\n\n    _handleFocusin(event) {\n      const {\n        trapElement\n      } = this._config;\n\n      if (event.target === document || event.target === trapElement || trapElement.contains(event.target)) {\n        return;\n      }\n\n      const elements = SelectorEngine__default.default.focusableChildren(trapElement);\n\n      if (elements.length === 0) {\n        trapElement.focus();\n      } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {\n        elements[elements.length - 1].focus();\n      } else {\n        elements[0].focus();\n      }\n    }\n\n    _handleKeydown(event) {\n      if (event.key !== TAB_KEY) {\n        return;\n      }\n\n      this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;\n    }\n\n  }\n\n  return FocusTrap;\n});","map":{"version":3,"sources":["../../src/util/focustrap.js"],"names":["NAME","DATA_KEY","EVENT_KEY","EVENT_FOCUSIN","EVENT_KEYDOWN_TAB","TAB_KEY","TAB_NAV_FORWARD","TAB_NAV_BACKWARD","Default","autofocus","trapElement","DefaultType","Config","constructor","activate","EventHandler","event","deactivate","_handleFocusin","elements","SelectorEngine","_handleKeydown"],"mappings":"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","sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.3): util/focustrap.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport EventHandler from '../dom/event-handler'\nimport SelectorEngine from '../dom/selector-engine'\nimport Config from './config'\n\n/**\n * Constants\n */\n\nconst NAME = 'focustrap'\nconst DATA_KEY = 'bs.focustrap'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst EVENT_FOCUSIN = `focusin${EVENT_KEY}`\nconst EVENT_KEYDOWN_TAB = `keydown.tab${EVENT_KEY}`\n\nconst TAB_KEY = 'Tab'\nconst TAB_NAV_FORWARD = 'forward'\nconst TAB_NAV_BACKWARD = 'backward'\n\nconst Default = {\n  autofocus: true,\n  trapElement: null // The element to trap focus inside of\n}\n\nconst DefaultType = {\n  autofocus: 'boolean',\n  trapElement: 'element'\n}\n\n/**\n * Class definition\n */\n\nclass FocusTrap extends Config {\n  constructor(config) {\n    super()\n    this._config = this._getConfig(config)\n    this._isActive = false\n    this._lastTabNavDirection = null\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  activate() {\n    if (this._isActive) {\n      return\n    }\n\n    if (this._config.autofocus) {\n      this._config.trapElement.focus()\n    }\n\n    EventHandler.off(document, EVENT_KEY) // guard against infinite focus loop\n    EventHandler.on(document, EVENT_FOCUSIN, event => this._handleFocusin(event))\n    EventHandler.on(document, EVENT_KEYDOWN_TAB, event => this._handleKeydown(event))\n\n    this._isActive = true\n  }\n\n  deactivate() {\n    if (!this._isActive) {\n      return\n    }\n\n    this._isActive = false\n    EventHandler.off(document, EVENT_KEY)\n  }\n\n  // Private\n  _handleFocusin(event) {\n    const { trapElement } = this._config\n\n    if (event.target === document || event.target === trapElement || trapElement.contains(event.target)) {\n      return\n    }\n\n    const elements = SelectorEngine.focusableChildren(trapElement)\n\n    if (elements.length === 0) {\n      trapElement.focus()\n    } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {\n      elements[elements.length - 1].focus()\n    } else {\n      elements[0].focus()\n    }\n  }\n\n  _handleKeydown(event) {\n    if (event.key !== TAB_KEY) {\n      return\n    }\n\n    this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD\n  }\n}\n\nexport default FocusTrap\n"]},"metadata":{},"sourceType":"script"}