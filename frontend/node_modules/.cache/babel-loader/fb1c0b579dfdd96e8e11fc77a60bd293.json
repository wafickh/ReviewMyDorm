{"ast":null,"code":"/*!\n  * Bootstrap manipulator.js v5.2.3 (https://getbootstrap.com/)\n  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Manipulator = factory());\n})(this, function () {\n  'use strict';\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): dom/manipulator.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  function normalizeData(value) {\n    if (value === 'true') {\n      return true;\n    }\n\n    if (value === 'false') {\n      return false;\n    }\n\n    if (value === Number(value).toString()) {\n      return Number(value);\n    }\n\n    if (value === '' || value === 'null') {\n      return null;\n    }\n\n    if (typeof value !== 'string') {\n      return value;\n    }\n\n    try {\n      return JSON.parse(decodeURIComponent(value));\n    } catch (_unused) {\n      return value;\n    }\n  }\n\n  function normalizeDataKey(key) {\n    return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`);\n  }\n\n  const Manipulator = {\n    setDataAttribute(element, key, value) {\n      element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value);\n    },\n\n    removeDataAttribute(element, key) {\n      element.removeAttribute(`data-bs-${normalizeDataKey(key)}`);\n    },\n\n    getDataAttributes(element) {\n      if (!element) {\n        return {};\n      }\n\n      const attributes = {};\n      const bsKeys = Object.keys(element.dataset).filter(key => key.startsWith('bs') && !key.startsWith('bsConfig'));\n\n      for (const key of bsKeys) {\n        let pureKey = key.replace(/^bs/, '');\n        pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);\n        attributes[pureKey] = normalizeData(element.dataset[key]);\n      }\n\n      return attributes;\n    },\n\n    getDataAttribute(element, key) {\n      return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`));\n    }\n\n  };\n  return Manipulator;\n});","map":{"version":3,"mappings":";;;;;;;;;AAAA;;;;;;;AAOA,WAASA,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,QAAIA,KAAK,KAAK,MAAd,EAAsB;AACpB,aAAO,IAAP;AACD;;AAED,QAAIA,KAAK,KAAK,OAAd,EAAuB;AACrB,aAAO,KAAP;AACD;;AAED,QAAIA,KAAK,KAAKC,MAAM,CAACD,KAAD,CAANC,CAAcC,QAAdD,EAAd,EAAwC;AACtC,aAAOA,MAAM,CAACD,KAAD,CAAb;AACD;;AAED,QAAIA,KAAK,KAAK,EAAVA,IAAgBA,KAAK,KAAK,MAA9B,EAAsC;AACpC,aAAO,IAAP;AACD;;AAED,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAOA,KAAP;AACD;;AAED,QAAI;AACF,aAAOG,IAAI,CAACC,KAALD,CAAWE,kBAAkB,CAACL,KAAD,CAA7BG,CAAP;AADF,MAEE,OAAMG,OAAN,EAAM;AACN,aAAON,KAAP;AACD;AACF;;AAED,WAASO,gBAAT,CAA0BC,GAA1B,EAA+B;AAC7B,WAAOA,GAAG,CAACC,OAAJD,CAAY,QAAZA,EAAsBE,GAAG,IAAK,IAAGA,GAAG,CAACC,WAAJD,EAAkB,EAAnDF,CAAP;AACD;;AAED,QAAMI,WAAW,GAAG;AAClBC,oBAAgB,CAACC,OAAD,EAAUN,GAAV,EAAeR,KAAf,EAAsB;AACpCc,aAAO,CAACC,YAARD,CAAgCP,2BAAgB,CAACC,GAAD,CAAhD,IAAyDR,KAAzDc;AAFgB;;AAKlBE,uBAAmB,CAACF,OAAD,EAAUN,GAAV,EAAe;AAChCM,aAAO,CAACG,eAARH,CAAyB,WAAUP,gBAAgB,CAACC,GAAD,CAAnD;AANgB;;AASlBU,qBAAiB,CAACJ,OAAD,EAAU;AACzB,UAAI,CAACA,OAAL,EAAc;AACZ,eAAO,EAAP;AACD;;AAED,YAAMK,UAAU,GAAG,EAAnB;AACA,YAAMC,MAAM,GAAGC,MAAM,CAACC,IAAPD,CAAYP,OAAO,CAACS,OAApBF,EAA6BG,MAA7BH,CAAoCb,GAAG,IAAIA,GAAG,CAACiB,UAAJjB,CAAe,IAAfA,KAAwB,CAACA,GAAG,CAACiB,UAAJjB,CAAe,UAAfA,CAApEa,CAAf;;AAEA,WAAK,MAAMb,GAAX,IAAkBY,MAAlB,EAA0B;AACxB,YAAIM,OAAO,GAAGlB,GAAG,CAACC,OAAJD,CAAY,KAAZA,EAAmB,EAAnBA,CAAd;AACAkB,eAAO,GAAGA,OAAO,CAACC,MAARD,CAAe,CAAfA,EAAkBf,WAAlBe,KAAkCA,OAAO,CAACE,KAARF,CAAc,CAAdA,EAAiBA,OAAO,CAACG,MAAzBH,CAA5CA;AACAP,kBAAU,CAACO,OAAD,CAAVP,GAAsBpB,aAAa,CAACe,OAAO,CAACS,OAART,CAAgBN,GAAhBM,CAAD,CAAnCK;AACD;;AAED,aAAOA,UAAP;AAvBgB;;AA0BlBW,oBAAgB,CAAChB,OAAD,EAAUN,GAAV,EAAe;AAC7B,aAAOT,aAAa,CAACe,OAAO,CAACiB,YAARjB,CAAgCP,2BAAgB,CAACC,GAAD,CAAM,EAAtDM,CAAD,CAApB;AACD;;AA5BiB,GAApB","names":["normalizeData","value","Number","toString","JSON","parse","decodeURIComponent","_unused","normalizeDataKey","key","replace","chr","toLowerCase","Manipulator","setDataAttribute","element","setAttribute","removeDataAttribute","removeAttribute","getDataAttributes","attributes","bsKeys","Object","keys","dataset","filter","startsWith","pureKey","charAt","slice","length","getDataAttribute","getAttribute"],"sources":["C:\\Users\\USER\\OneDrive\\Desktop\\WebCourse\\DormCritique\\frontend\\node_modules\\bootstrap\\js\\src\\dom\\manipulator.js"],"sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.3): dom/manipulator.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nfunction normalizeData(value) {\n  if (value === 'true') {\n    return true\n  }\n\n  if (value === 'false') {\n    return false\n  }\n\n  if (value === Number(value).toString()) {\n    return Number(value)\n  }\n\n  if (value === '' || value === 'null') {\n    return null\n  }\n\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  try {\n    return JSON.parse(decodeURIComponent(value))\n  } catch {\n    return value\n  }\n}\n\nfunction normalizeDataKey(key) {\n  return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`)\n}\n\nconst Manipulator = {\n  setDataAttribute(element, key, value) {\n    element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value)\n  },\n\n  removeDataAttribute(element, key) {\n    element.removeAttribute(`data-bs-${normalizeDataKey(key)}`)\n  },\n\n  getDataAttributes(element) {\n    if (!element) {\n      return {}\n    }\n\n    const attributes = {}\n    const bsKeys = Object.keys(element.dataset).filter(key => key.startsWith('bs') && !key.startsWith('bsConfig'))\n\n    for (const key of bsKeys) {\n      let pureKey = key.replace(/^bs/, '')\n      pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length)\n      attributes[pureKey] = normalizeData(element.dataset[key])\n    }\n\n    return attributes\n  },\n\n  getDataAttribute(element, key) {\n    return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`))\n  }\n}\n\nexport default Manipulator\n"]},"metadata":{},"sourceType":"script"}