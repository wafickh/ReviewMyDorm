{"ast":null,"code":"/*!\n  * Bootstrap event-handler.js v5.2.3 (https://getbootstrap.com/)\n  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('../util/index')) : typeof define === 'function' && define.amd ? define(['../util/index'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.EventHandler = factory(global.Index));\n})(this, function (index) {\n  'use strict';\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): dom/event-handler.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * Constants\n   */\n\n  const namespaceRegex = /[^.]*(?=\\..*)\\.|.*/;\n  const stripNameRegex = /\\..*/;\n  const stripUidRegex = /::\\d+$/;\n  const eventRegistry = {}; // Events storage\n\n  let uidEvent = 1;\n  const customEvents = {\n    mouseenter: 'mouseover',\n    mouseleave: 'mouseout'\n  };\n  const nativeEvents = new Set(['click', 'dblclick', 'mouseup', 'mousedown', 'contextmenu', 'mousewheel', 'DOMMouseScroll', 'mouseover', 'mouseout', 'mousemove', 'selectstart', 'selectend', 'keydown', 'keypress', 'keyup', 'orientationchange', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'pointerdown', 'pointermove', 'pointerup', 'pointerleave', 'pointercancel', 'gesturestart', 'gesturechange', 'gestureend', 'focus', 'blur', 'change', 'reset', 'select', 'submit', 'focusin', 'focusout', 'load', 'unload', 'beforeunload', 'resize', 'move', 'DOMContentLoaded', 'readystatechange', 'error', 'abort', 'scroll']);\n  /**\n   * Private methods\n   */\n\n  function makeEventUid(element, uid) {\n    return uid && `${uid}::${uidEvent++}` || element.uidEvent || uidEvent++;\n  }\n\n  function getElementEvents(element) {\n    const uid = makeEventUid(element);\n    element.uidEvent = uid;\n    eventRegistry[uid] = eventRegistry[uid] || {};\n    return eventRegistry[uid];\n  }\n\n  function bootstrapHandler(element, fn) {\n    return function handler(event) {\n      hydrateObj(event, {\n        delegateTarget: element\n      });\n\n      if (handler.oneOff) {\n        EventHandler.off(element, event.type, fn);\n      }\n\n      return fn.apply(element, [event]);\n    };\n  }\n\n  function bootstrapDelegationHandler(element, selector, fn) {\n    return function handler(event) {\n      const domElements = element.querySelectorAll(selector);\n\n      for (let {\n        target\n      } = event; target && target !== this; target = target.parentNode) {\n        for (const domElement of domElements) {\n          if (domElement !== target) {\n            continue;\n          }\n\n          hydrateObj(event, {\n            delegateTarget: target\n          });\n\n          if (handler.oneOff) {\n            EventHandler.off(element, event.type, selector, fn);\n          }\n\n          return fn.apply(target, [event]);\n        }\n      }\n    };\n  }\n\n  function findHandler(events, callable, delegationSelector = null) {\n    return Object.values(events).find(event => event.callable === callable && event.delegationSelector === delegationSelector);\n  }\n\n  function normalizeParameters(originalTypeEvent, handler, delegationFunction) {\n    const isDelegated = typeof handler === 'string'; // todo: tooltip passes `false` instead of selector, so we need to check\n\n    const callable = isDelegated ? delegationFunction : handler || delegationFunction;\n    let typeEvent = getTypeEvent(originalTypeEvent);\n\n    if (!nativeEvents.has(typeEvent)) {\n      typeEvent = originalTypeEvent;\n    }\n\n    return [isDelegated, callable, typeEvent];\n  }\n\n  function addHandler(element, originalTypeEvent, handler, delegationFunction, oneOff) {\n    if (typeof originalTypeEvent !== 'string' || !element) {\n      return;\n    }\n\n    let [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction); // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position\n    // this prevents the handler from being dispatched the same way as mouseover or mouseout does\n\n    if (originalTypeEvent in customEvents) {\n      const wrapFunction = fn => {\n        return function (event) {\n          if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {\n            return fn.call(this, event);\n          }\n        };\n      };\n\n      callable = wrapFunction(callable);\n    }\n\n    const events = getElementEvents(element);\n    const handlers = events[typeEvent] || (events[typeEvent] = {});\n    const previousFunction = findHandler(handlers, callable, isDelegated ? handler : null);\n\n    if (previousFunction) {\n      previousFunction.oneOff = previousFunction.oneOff && oneOff;\n      return;\n    }\n\n    const uid = makeEventUid(callable, originalTypeEvent.replace(namespaceRegex, ''));\n    const fn = isDelegated ? bootstrapDelegationHandler(element, handler, callable) : bootstrapHandler(element, callable);\n    fn.delegationSelector = isDelegated ? handler : null;\n    fn.callable = callable;\n    fn.oneOff = oneOff;\n    fn.uidEvent = uid;\n    handlers[uid] = fn;\n    element.addEventListener(typeEvent, fn, isDelegated);\n  }\n\n  function removeHandler(element, events, typeEvent, handler, delegationSelector) {\n    const fn = findHandler(events[typeEvent], handler, delegationSelector);\n\n    if (!fn) {\n      return;\n    }\n\n    element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));\n    delete events[typeEvent][fn.uidEvent];\n  }\n\n  function removeNamespacedHandlers(element, events, typeEvent, namespace) {\n    const storeElementEvent = events[typeEvent] || {};\n\n    for (const handlerKey of Object.keys(storeElementEvent)) {\n      if (handlerKey.includes(namespace)) {\n        const event = storeElementEvent[handlerKey];\n        removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);\n      }\n    }\n  }\n\n  function getTypeEvent(event) {\n    // allow to get the native events from namespaced events ('click.bs.button' --> 'click')\n    event = event.replace(stripNameRegex, '');\n    return customEvents[event] || event;\n  }\n\n  const EventHandler = {\n    on(element, event, handler, delegationFunction) {\n      addHandler(element, event, handler, delegationFunction, false);\n    },\n\n    one(element, event, handler, delegationFunction) {\n      addHandler(element, event, handler, delegationFunction, true);\n    },\n\n    off(element, originalTypeEvent, handler, delegationFunction) {\n      if (typeof originalTypeEvent !== 'string' || !element) {\n        return;\n      }\n\n      const [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction);\n      const inNamespace = typeEvent !== originalTypeEvent;\n      const events = getElementEvents(element);\n      const storeElementEvent = events[typeEvent] || {};\n      const isNamespace = originalTypeEvent.startsWith('.');\n\n      if (typeof callable !== 'undefined') {\n        // Simplest case: handler is passed, remove that listener ONLY.\n        if (!Object.keys(storeElementEvent).length) {\n          return;\n        }\n\n        removeHandler(element, events, typeEvent, callable, isDelegated ? handler : null);\n        return;\n      }\n\n      if (isNamespace) {\n        for (const elementEvent of Object.keys(events)) {\n          removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));\n        }\n      }\n\n      for (const keyHandlers of Object.keys(storeElementEvent)) {\n        const handlerKey = keyHandlers.replace(stripUidRegex, '');\n\n        if (!inNamespace || originalTypeEvent.includes(handlerKey)) {\n          const event = storeElementEvent[keyHandlers];\n          removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);\n        }\n      }\n    },\n\n    trigger(element, event, args) {\n      if (typeof event !== 'string' || !element) {\n        return null;\n      }\n\n      const $ = index.getjQuery();\n      const typeEvent = getTypeEvent(event);\n      const inNamespace = event !== typeEvent;\n      let jQueryEvent = null;\n      let bubbles = true;\n      let nativeDispatch = true;\n      let defaultPrevented = false;\n\n      if (inNamespace && $) {\n        jQueryEvent = $.Event(event, args);\n        $(element).trigger(jQueryEvent);\n        bubbles = !jQueryEvent.isPropagationStopped();\n        nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();\n        defaultPrevented = jQueryEvent.isDefaultPrevented();\n      }\n\n      let evt = new Event(event, {\n        bubbles,\n        cancelable: true\n      });\n      evt = hydrateObj(evt, args);\n\n      if (defaultPrevented) {\n        evt.preventDefault();\n      }\n\n      if (nativeDispatch) {\n        element.dispatchEvent(evt);\n      }\n\n      if (evt.defaultPrevented && jQueryEvent) {\n        jQueryEvent.preventDefault();\n      }\n\n      return evt;\n    }\n\n  };\n\n  function hydrateObj(obj, meta) {\n    for (const [key, value] of Object.entries(meta || {})) {\n      try {\n        obj[key] = value;\n      } catch (_unused) {\n        Object.defineProperty(obj, key, {\n          configurable: true,\n\n          get() {\n            return value;\n          }\n\n        });\n      }\n    }\n\n    return obj;\n  }\n\n  return EventHandler;\n});","map":{"version":3,"sources":["../../src/dom/event-handler.js"],"names":["namespaceRegex","stripNameRegex","stripUidRegex","eventRegistry","uidEvent","customEvents","mouseenter","mouseleave","nativeEvents","uid","element","makeEventUid","hydrateObj","delegateTarget","handler","EventHandler","event","fn","domElements","target","domElement","delegationSelector","Object","isDelegated","callable","typeEvent","getTypeEvent","normalizeParameters","originalTypeEvent","wrapFunction","events","getElementEvents","handlers","previousFunction","findHandler","bootstrapDelegationHandler","bootstrapHandler","Boolean","storeElementEvent","handlerKey","removeHandler","on","addHandler","one","off","inNamespace","isNamespace","removeNamespacedHandlers","keyHandlers","trigger","$","getjQuery","jQueryEvent","bubbles","nativeDispatch","defaultPrevented","evt","cancelable","meta","obj","configurable","get"],"mappings":"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","sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.3): dom/event-handler.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport { getjQuery } from '../util/index'\n\n/**\n * Constants\n */\n\nconst namespaceRegex = /[^.]*(?=\\..*)\\.|.*/\nconst stripNameRegex = /\\..*/\nconst stripUidRegex = /::\\d+$/\nconst eventRegistry = {} // Events storage\nlet uidEvent = 1\nconst customEvents = {\n  mouseenter: 'mouseover',\n  mouseleave: 'mouseout'\n}\n\nconst nativeEvents = new Set([\n  'click',\n  'dblclick',\n  'mouseup',\n  'mousedown',\n  'contextmenu',\n  'mousewheel',\n  'DOMMouseScroll',\n  'mouseover',\n  'mouseout',\n  'mousemove',\n  'selectstart',\n  'selectend',\n  'keydown',\n  'keypress',\n  'keyup',\n  'orientationchange',\n  'touchstart',\n  'touchmove',\n  'touchend',\n  'touchcancel',\n  'pointerdown',\n  'pointermove',\n  'pointerup',\n  'pointerleave',\n  'pointercancel',\n  'gesturestart',\n  'gesturechange',\n  'gestureend',\n  'focus',\n  'blur',\n  'change',\n  'reset',\n  'select',\n  'submit',\n  'focusin',\n  'focusout',\n  'load',\n  'unload',\n  'beforeunload',\n  'resize',\n  'move',\n  'DOMContentLoaded',\n  'readystatechange',\n  'error',\n  'abort',\n  'scroll'\n])\n\n/**\n * Private methods\n */\n\nfunction makeEventUid(element, uid) {\n  return (uid && `${uid}::${uidEvent++}`) || element.uidEvent || uidEvent++\n}\n\nfunction getElementEvents(element) {\n  const uid = makeEventUid(element)\n\n  element.uidEvent = uid\n  eventRegistry[uid] = eventRegistry[uid] || {}\n\n  return eventRegistry[uid]\n}\n\nfunction bootstrapHandler(element, fn) {\n  return function handler(event) {\n    hydrateObj(event, { delegateTarget: element })\n\n    if (handler.oneOff) {\n      EventHandler.off(element, event.type, fn)\n    }\n\n    return fn.apply(element, [event])\n  }\n}\n\nfunction bootstrapDelegationHandler(element, selector, fn) {\n  return function handler(event) {\n    const domElements = element.querySelectorAll(selector)\n\n    for (let { target } = event; target && target !== this; target = target.parentNode) {\n      for (const domElement of domElements) {\n        if (domElement !== target) {\n          continue\n        }\n\n        hydrateObj(event, { delegateTarget: target })\n\n        if (handler.oneOff) {\n          EventHandler.off(element, event.type, selector, fn)\n        }\n\n        return fn.apply(target, [event])\n      }\n    }\n  }\n}\n\nfunction findHandler(events, callable, delegationSelector = null) {\n  return Object.values(events)\n    .find(event => event.callable === callable && event.delegationSelector === delegationSelector)\n}\n\nfunction normalizeParameters(originalTypeEvent, handler, delegationFunction) {\n  const isDelegated = typeof handler === 'string'\n  // todo: tooltip passes `false` instead of selector, so we need to check\n  const callable = isDelegated ? delegationFunction : (handler || delegationFunction)\n  let typeEvent = getTypeEvent(originalTypeEvent)\n\n  if (!nativeEvents.has(typeEvent)) {\n    typeEvent = originalTypeEvent\n  }\n\n  return [isDelegated, callable, typeEvent]\n}\n\nfunction addHandler(element, originalTypeEvent, handler, delegationFunction, oneOff) {\n  if (typeof originalTypeEvent !== 'string' || !element) {\n    return\n  }\n\n  let [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction)\n\n  // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position\n  // this prevents the handler from being dispatched the same way as mouseover or mouseout does\n  if (originalTypeEvent in customEvents) {\n    const wrapFunction = fn => {\n      return function (event) {\n        if (!event.relatedTarget || (event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget))) {\n          return fn.call(this, event)\n        }\n      }\n    }\n\n    callable = wrapFunction(callable)\n  }\n\n  const events = getElementEvents(element)\n  const handlers = events[typeEvent] || (events[typeEvent] = {})\n  const previousFunction = findHandler(handlers, callable, isDelegated ? handler : null)\n\n  if (previousFunction) {\n    previousFunction.oneOff = previousFunction.oneOff && oneOff\n\n    return\n  }\n\n  const uid = makeEventUid(callable, originalTypeEvent.replace(namespaceRegex, ''))\n  const fn = isDelegated ?\n    bootstrapDelegationHandler(element, handler, callable) :\n    bootstrapHandler(element, callable)\n\n  fn.delegationSelector = isDelegated ? handler : null\n  fn.callable = callable\n  fn.oneOff = oneOff\n  fn.uidEvent = uid\n  handlers[uid] = fn\n\n  element.addEventListener(typeEvent, fn, isDelegated)\n}\n\nfunction removeHandler(element, events, typeEvent, handler, delegationSelector) {\n  const fn = findHandler(events[typeEvent], handler, delegationSelector)\n\n  if (!fn) {\n    return\n  }\n\n  element.removeEventListener(typeEvent, fn, Boolean(delegationSelector))\n  delete events[typeEvent][fn.uidEvent]\n}\n\nfunction removeNamespacedHandlers(element, events, typeEvent, namespace) {\n  const storeElementEvent = events[typeEvent] || {}\n\n  for (const handlerKey of Object.keys(storeElementEvent)) {\n    if (handlerKey.includes(namespace)) {\n      const event = storeElementEvent[handlerKey]\n      removeHandler(element, events, typeEvent, event.callable, event.delegationSelector)\n    }\n  }\n}\n\nfunction getTypeEvent(event) {\n  // allow to get the native events from namespaced events ('click.bs.button' --> 'click')\n  event = event.replace(stripNameRegex, '')\n  return customEvents[event] || event\n}\n\nconst EventHandler = {\n  on(element, event, handler, delegationFunction) {\n    addHandler(element, event, handler, delegationFunction, false)\n  },\n\n  one(element, event, handler, delegationFunction) {\n    addHandler(element, event, handler, delegationFunction, true)\n  },\n\n  off(element, originalTypeEvent, handler, delegationFunction) {\n    if (typeof originalTypeEvent !== 'string' || !element) {\n      return\n    }\n\n    const [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction)\n    const inNamespace = typeEvent !== originalTypeEvent\n    const events = getElementEvents(element)\n    const storeElementEvent = events[typeEvent] || {}\n    const isNamespace = originalTypeEvent.startsWith('.')\n\n    if (typeof callable !== 'undefined') {\n      // Simplest case: handler is passed, remove that listener ONLY.\n      if (!Object.keys(storeElementEvent).length) {\n        return\n      }\n\n      removeHandler(element, events, typeEvent, callable, isDelegated ? handler : null)\n      return\n    }\n\n    if (isNamespace) {\n      for (const elementEvent of Object.keys(events)) {\n        removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1))\n      }\n    }\n\n    for (const keyHandlers of Object.keys(storeElementEvent)) {\n      const handlerKey = keyHandlers.replace(stripUidRegex, '')\n\n      if (!inNamespace || originalTypeEvent.includes(handlerKey)) {\n        const event = storeElementEvent[keyHandlers]\n        removeHandler(element, events, typeEvent, event.callable, event.delegationSelector)\n      }\n    }\n  },\n\n  trigger(element, event, args) {\n    if (typeof event !== 'string' || !element) {\n      return null\n    }\n\n    const $ = getjQuery()\n    const typeEvent = getTypeEvent(event)\n    const inNamespace = event !== typeEvent\n\n    let jQueryEvent = null\n    let bubbles = true\n    let nativeDispatch = true\n    let defaultPrevented = false\n\n    if (inNamespace && $) {\n      jQueryEvent = $.Event(event, args)\n\n      $(element).trigger(jQueryEvent)\n      bubbles = !jQueryEvent.isPropagationStopped()\n      nativeDispatch = !jQueryEvent.isImmediatePropagationStopped()\n      defaultPrevented = jQueryEvent.isDefaultPrevented()\n    }\n\n    let evt = new Event(event, { bubbles, cancelable: true })\n    evt = hydrateObj(evt, args)\n\n    if (defaultPrevented) {\n      evt.preventDefault()\n    }\n\n    if (nativeDispatch) {\n      element.dispatchEvent(evt)\n    }\n\n    if (evt.defaultPrevented && jQueryEvent) {\n      jQueryEvent.preventDefault()\n    }\n\n    return evt\n  }\n}\n\nfunction hydrateObj(obj, meta) {\n  for (const [key, value] of Object.entries(meta || {})) {\n    try {\n      obj[key] = value\n    } catch {\n      Object.defineProperty(obj, key, {\n        configurable: true,\n        get() {\n          return value\n        }\n      })\n    }\n  }\n\n  return obj\n}\n\nexport default EventHandler\n"]},"metadata":{},"sourceType":"script"}