{"ast":null,"code":"import * as React from 'react';\nimport { useContext, useEffect, useMemo, useState, useRef } from 'react';\nimport { cloneElement } from 'react';\nimport { MapContext } from './map';\nimport assert from '../utils/assert';\nimport { deepEqual } from '../utils/deep-equal';\nlet sourceCounter = 0;\n\nfunction createSource(map, id, props) {\n  // @ts-ignore\n  if (map.style && map.style._loaded) {\n    const options = { ...props\n    };\n    delete options.id;\n    delete options.children; // @ts-ignore\n\n    map.addSource(id, options);\n    return map.getSource(id);\n  }\n\n  return null;\n}\n/* eslint-disable complexity */\n\n\nfunction updateSource(source, props, prevProps) {\n  assert(props.id === prevProps.id, 'source id changed');\n  assert(props.type === prevProps.type, 'source type changed');\n  let changedKey = '';\n  let changedKeyCount = 0;\n\n  for (const key in props) {\n    if (key !== 'children' && key !== 'id' && !deepEqual(prevProps[key], props[key])) {\n      changedKey = key;\n      changedKeyCount++;\n    }\n  }\n\n  if (!changedKeyCount) {\n    return;\n  }\n\n  const type = props.type;\n\n  if (type === 'geojson') {\n    source.setData(props.data);\n  } else if (type === 'image') {\n    source.updateImage({\n      url: props.url,\n      coordinates: props.coordinates\n    });\n  } else if ((type === 'canvas' || type === 'video') && changedKeyCount === 1 && changedKey === 'coordinates') {\n    source.setCoordinates(props.coordinates);\n  } else if (type === 'vector' && 'setUrl' in source) {\n    // Added in 1.12.0:\n    // vectorTileSource.setTiles\n    // vectorTileSource.setUrl\n    switch (changedKey) {\n      case 'url':\n        source.setUrl(props.url);\n        break;\n\n      case 'tiles':\n        source.setTiles(props.tiles);\n        break;\n\n      default:\n    }\n  } else {\n    // eslint-disable-next-line\n    console.warn(`Unable to update <Source> prop: ${changedKey}`);\n  }\n}\n/* eslint-enable complexity */\n\n\nfunction Source(props) {\n  const map = useContext(MapContext).map.getMap();\n  const propsRef = useRef(props);\n  const [, setStyleLoaded] = useState(0);\n  const id = useMemo(() => props.id || `jsx-source-${sourceCounter++}`, []);\n  useEffect(() => {\n    if (map) {\n      const forceUpdate = () => setTimeout(() => setStyleLoaded(version => version + 1), 0);\n\n      map.on('styledata', forceUpdate);\n      forceUpdate();\n      return () => {\n        var _a;\n\n        map.off('styledata', forceUpdate); // @ts-ignore\n\n        if (map.style && map.style._loaded && map.getSource(id)) {\n          // Parent effects are destroyed before child ones, see\n          // https://github.com/facebook/react/issues/16728\n          // Source can only be removed after all child layers are removed\n          const allLayers = (_a = map.getStyle()) === null || _a === void 0 ? void 0 : _a.layers;\n\n          if (allLayers) {\n            for (const layer of allLayers) {\n              // @ts-ignore (2339) source does not exist on all layer types\n              if (layer.source === id) {\n                map.removeLayer(layer.id);\n              }\n            }\n          }\n\n          map.removeSource(id);\n        }\n      };\n    }\n\n    return undefined;\n  }, [map]); // @ts-ignore\n\n  let source = map && map.style && map.getSource(id);\n\n  if (source) {\n    updateSource(source, props, propsRef.current);\n  } else {\n    source = createSource(map, id, props);\n  }\n\n  propsRef.current = props;\n  return source && React.Children.map(props.children, child => child && cloneElement(child, {\n    source: id\n  })) || null;\n}\n\nexport default Source;","map":{"version":3,"sources":["../../../src/components/source.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAQ,UAAR,EAAoB,SAApB,EAA+B,OAA/B,EAAwC,QAAxC,EAAkD,MAAlD,QAA+D,OAA/D;AACA,SAAQ,YAAR,QAA2B,OAA3B;AACA,SAAQ,UAAR,QAAyB,OAAzB;AACA,OAAO,MAAP,MAAmB,iBAAnB;AACA,SAAQ,SAAR,QAAwB,qBAAxB;AAgBA,IAAI,aAAa,GAAG,CAApB;;AAEA,SAAS,YAAT,CAAsB,GAAtB,EAAsC,EAAtC,EAAkD,KAAlD,EAAoE;AAClE;AACA,MAAI,GAAG,CAAC,KAAJ,IAAa,GAAG,CAAC,KAAJ,CAAU,OAA3B,EAAoC;AAClC,UAAM,OAAO,GAAG,EAAC,GAAG;AAAJ,KAAhB;AACA,WAAO,OAAO,CAAC,EAAf;AACA,WAAO,OAAO,CAAC,QAAf,CAHkC,CAIlC;;AACA,IAAA,GAAG,CAAC,SAAJ,CAAc,EAAd,EAAkB,OAAlB;AACA,WAAO,GAAG,CAAC,SAAJ,CAAc,EAAd,CAAP;AACD;;AACD,SAAO,IAAP;AACD;AAED;;;AACA,SAAS,YAAT,CAAsB,MAAtB,EAA6C,KAA7C,EAAiE,SAAjE,EAAuF;AACrF,EAAA,MAAM,CAAC,KAAK,CAAC,EAAN,KAAa,SAAS,CAAC,EAAxB,EAA4B,mBAA5B,CAAN;AACA,EAAA,MAAM,CAAC,KAAK,CAAC,IAAN,KAAe,SAAS,CAAC,IAA1B,EAAgC,qBAAhC,CAAN;AAEA,MAAI,UAAU,GAAG,EAAjB;AACA,MAAI,eAAe,GAAG,CAAtB;;AAEA,OAAK,MAAM,GAAX,IAAkB,KAAlB,EAAyB;AACvB,QAAI,GAAG,KAAK,UAAR,IAAsB,GAAG,KAAK,IAA9B,IAAsC,CAAC,SAAS,CAAC,SAAS,CAAC,GAAD,CAAV,EAAiB,KAAK,CAAC,GAAD,CAAtB,CAApD,EAAkF;AAChF,MAAA,UAAU,GAAG,GAAb;AACA,MAAA,eAAe;AAChB;AACF;;AAED,MAAI,CAAC,eAAL,EAAsB;AACpB;AACD;;AAED,QAAM,IAAI,GAAG,KAAK,CAAC,IAAnB;;AAEA,MAAI,IAAI,KAAK,SAAb,EAAwB;AACrB,IAAA,MAAwB,CAAC,OAAzB,CAAiC,KAAK,CAAC,IAAvC;AACF,GAFD,MAEO,IAAI,IAAI,KAAK,OAAb,EAAsB;AAC1B,IAAA,MAAsB,CAAC,WAAvB,CAAmC;AAAC,MAAA,GAAG,EAAE,KAAK,CAAC,GAAZ;AAAiB,MAAA,WAAW,EAAE,KAAK,CAAC;AAApC,KAAnC;AACF,GAFM,MAEA,IACL,CAAC,IAAI,KAAK,QAAT,IAAqB,IAAI,KAAK,OAA/B,KACA,eAAe,KAAK,CADpB,IAEA,UAAU,KAAK,aAHV,EAIL;AACC,IAAA,MAAsB,CAAC,cAAvB,CAAsC,KAAK,CAAC,WAA5C;AACF,GANM,MAMA,IAAI,IAAI,KAAK,QAAT,IAAqB,YAAY,MAArC,EAA6C;AAClD;AACA;AACA;AACA,YAAQ,UAAR;AACE,WAAK,KAAL;AACE,QAAA,MAAM,CAAC,MAAP,CAAc,KAAK,CAAC,GAApB;AACA;;AACF,WAAK,OAAL;AACE,QAAA,MAAM,CAAC,QAAP,CAAgB,KAAK,CAAC,KAAtB;AACA;;AACF;AAPF;AASD,GAbM,MAaA;AACL;AACA,IAAA,OAAO,CAAC,IAAR,CAAa,mCAAmC,UAAU,EAA1D;AACD;AACF;AACD;;;AAEA,SAAS,MAAT,CAAgB,KAAhB,EAAkC;AAChC,QAAM,GAAG,GAAc,UAAU,CAAC,UAAD,CAAV,CAAuB,GAAvB,CAA2B,MAA3B,EAAvB;AACA,QAAM,QAAQ,GAAG,MAAM,CAAC,KAAD,CAAvB;AACA,QAAM,GAAG,cAAH,IAAqB,QAAQ,CAAC,CAAD,CAAnC;AAEA,QAAM,EAAE,GAAG,OAAO,CAAC,MAAM,KAAK,CAAC,EAAN,IAAY,cAAc,aAAa,EAAE,EAAhD,EAAoD,EAApD,CAAlB;AAEA,EAAA,SAAS,CAAC,MAAK;AACb,QAAI,GAAJ,EAAS;AACP,YAAM,WAAW,GAAG,MAAM,UAAU,CAAC,MAAM,cAAc,CAAC,OAAO,IAAI,OAAO,GAAG,CAAtB,CAArB,EAA+C,CAA/C,CAApC;;AACA,MAAA,GAAG,CAAC,EAAJ,CAAO,WAAP,EAAoB,WAApB;AACA,MAAA,WAAW;AAEX,aAAO,MAAK;;;AACV,QAAA,GAAG,CAAC,GAAJ,CAAQ,WAAR,EAAqB,WAArB,EADU,CAEV;;AACA,YAAI,GAAG,CAAC,KAAJ,IAAa,GAAG,CAAC,KAAJ,CAAU,OAAvB,IAAkC,GAAG,CAAC,SAAJ,CAAc,EAAd,CAAtC,EAAyD;AACvD;AACA;AACA;AACA,gBAAM,SAAS,GAAG,CAAA,EAAA,GAAA,GAAG,CAAC,QAAJ,EAAA,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAc,EAAA,CAAE,MAAlC;;AACA,cAAI,SAAJ,EAAe;AACb,iBAAK,MAAM,KAAX,IAAoB,SAApB,EAA+B;AAC7B;AACA,kBAAI,KAAK,CAAC,MAAN,KAAiB,EAArB,EAAyB;AACvB,gBAAA,GAAG,CAAC,WAAJ,CAAgB,KAAK,CAAC,EAAtB;AACD;AACF;AACF;;AACD,UAAA,GAAG,CAAC,YAAJ,CAAiB,EAAjB;AACD;AACF,OAlBD;AAmBD;;AACD,WAAO,SAAP;AACD,GA3BQ,EA2BN,CAAC,GAAD,CA3BM,CAAT,CAPgC,CAoChC;;AACA,MAAI,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,KAAX,IAAoB,GAAG,CAAC,SAAJ,CAAc,EAAd,CAAjC;;AACA,MAAI,MAAJ,EAAY;AACV,IAAA,YAAY,CAAC,MAAD,EAAS,KAAT,EAAgB,QAAQ,CAAC,OAAzB,CAAZ;AACD,GAFD,MAEO;AACL,IAAA,MAAM,GAAG,YAAY,CAAC,GAAD,EAAM,EAAN,EAAU,KAAV,CAArB;AACD;;AACD,EAAA,QAAQ,CAAC,OAAT,GAAmB,KAAnB;AAEA,SACG,MAAM,IACL,KAAK,CAAC,QAAN,CAAe,GAAf,CACE,KAAK,CAAC,QADR,EAEE,KAAK,IACH,KAAK,IACL,YAAY,CAAC,KAAD,EAAQ;AAClB,IAAA,MAAM,EAAE;AADU,GAAR,CAJhB,CADF,IASA,IAVF;AAYD;;AAED,eAAe,MAAf","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport { useContext, useEffect, useMemo, useState, useRef } from 'react';\nimport { cloneElement } from 'react';\nimport { MapContext } from './map';\nimport assert from '../utils/assert';\nimport { deepEqual } from '../utils/deep-equal';\nlet sourceCounter = 0;\nfunction createSource(map, id, props) {\n    // @ts-ignore\n    if (map.style && map.style._loaded) {\n        const options = { ...props };\n        delete options.id;\n        delete options.children;\n        // @ts-ignore\n        map.addSource(id, options);\n        return map.getSource(id);\n    }\n    return null;\n}\n/* eslint-disable complexity */\nfunction updateSource(source, props, prevProps) {\n    assert(props.id === prevProps.id, 'source id changed');\n    assert(props.type === prevProps.type, 'source type changed');\n    let changedKey = '';\n    let changedKeyCount = 0;\n    for (const key in props) {\n        if (key !== 'children' && key !== 'id' && !deepEqual(prevProps[key], props[key])) {\n            changedKey = key;\n            changedKeyCount++;\n        }\n    }\n    if (!changedKeyCount) {\n        return;\n    }\n    const type = props.type;\n    if (type === 'geojson') {\n        source.setData(props.data);\n    }\n    else if (type === 'image') {\n        source.updateImage({ url: props.url, coordinates: props.coordinates });\n    }\n    else if ((type === 'canvas' || type === 'video') &&\n        changedKeyCount === 1 &&\n        changedKey === 'coordinates') {\n        source.setCoordinates(props.coordinates);\n    }\n    else if (type === 'vector' && 'setUrl' in source) {\n        // Added in 1.12.0:\n        // vectorTileSource.setTiles\n        // vectorTileSource.setUrl\n        switch (changedKey) {\n            case 'url':\n                source.setUrl(props.url);\n                break;\n            case 'tiles':\n                source.setTiles(props.tiles);\n                break;\n            default:\n        }\n    }\n    else {\n        // eslint-disable-next-line\n        console.warn(`Unable to update <Source> prop: ${changedKey}`);\n    }\n}\n/* eslint-enable complexity */\nfunction Source(props) {\n    const map = useContext(MapContext).map.getMap();\n    const propsRef = useRef(props);\n    const [, setStyleLoaded] = useState(0);\n    const id = useMemo(() => props.id || `jsx-source-${sourceCounter++}`, []);\n    useEffect(() => {\n        if (map) {\n            const forceUpdate = () => setTimeout(() => setStyleLoaded(version => version + 1), 0);\n            map.on('styledata', forceUpdate);\n            forceUpdate();\n            return () => {\n                var _a;\n                map.off('styledata', forceUpdate);\n                // @ts-ignore\n                if (map.style && map.style._loaded && map.getSource(id)) {\n                    // Parent effects are destroyed before child ones, see\n                    // https://github.com/facebook/react/issues/16728\n                    // Source can only be removed after all child layers are removed\n                    const allLayers = (_a = map.getStyle()) === null || _a === void 0 ? void 0 : _a.layers;\n                    if (allLayers) {\n                        for (const layer of allLayers) {\n                            // @ts-ignore (2339) source does not exist on all layer types\n                            if (layer.source === id) {\n                                map.removeLayer(layer.id);\n                            }\n                        }\n                    }\n                    map.removeSource(id);\n                }\n            };\n        }\n        return undefined;\n    }, [map]);\n    // @ts-ignore\n    let source = map && map.style && map.getSource(id);\n    if (source) {\n        updateSource(source, props, propsRef.current);\n    }\n    else {\n        source = createSource(map, id, props);\n    }\n    propsRef.current = props;\n    return ((source &&\n        React.Children.map(props.children, child => child &&\n            cloneElement(child, {\n                source: id\n            }))) ||\n        null);\n}\nexport default Source;\n//# sourceMappingURL=source.js.map"]},"metadata":{},"sourceType":"module"}