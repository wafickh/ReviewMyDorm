{"ast":null,"code":"/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.3): util/config.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport { isElement, toType } from './index';\nimport Manipulator from '../dom/manipulator';\n\n/**\n * Class definition\n */\n\nclass Config {\n  // Getters\n  static get Default() {\n    return {};\n  }\n  static get DefaultType() {\n    return {};\n  }\n  static get NAME() {\n    throw new Error('You have to implement the static method \"NAME\", for each component!');\n  }\n  _getConfig(config) {\n    config = this._mergeConfigObj(config);\n    config = this._configAfterMerge(config);\n    this._typeCheckConfig(config);\n    return config;\n  }\n  _configAfterMerge(config) {\n    return config;\n  }\n  _mergeConfigObj(config, element) {\n    const jsonConfig = isElement(element) ? Manipulator.getDataAttribute(element, 'config') : {}; // try to parse\n\n    return {\n      ...this.constructor.Default,\n      ...(typeof jsonConfig === 'object' ? jsonConfig : {}),\n      ...(isElement(element) ? Manipulator.getDataAttributes(element) : {}),\n      ...(typeof config === 'object' ? config : {})\n    };\n  }\n  _typeCheckConfig(config) {\n    let configTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.constructor.DefaultType;\n    for (const property of Object.keys(configTypes)) {\n      const expectedTypes = configTypes[property];\n      const value = config[property];\n      const valueType = isElement(value) ? 'element' : toType(value);\n      if (!new RegExp(expectedTypes).test(valueType)) {\n        throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option \"${property}\" provided type \"${valueType}\" but expected type \"${expectedTypes}\".`);\n      }\n    }\n  }\n}\nexport default Config;","map":{"version":3,"names":["isElement","toType","Manipulator","Config","Default","DefaultType","NAME","Error","_getConfig","config","_mergeConfigObj","_configAfterMerge","_typeCheckConfig","element","jsonConfig","getDataAttribute","constructor","getDataAttributes","configTypes","property","Object","keys","expectedTypes","value","valueType","RegExp","test","TypeError","toUpperCase"],"sources":["C:/Users/USER/OneDrive/Desktop/WebCourse/DormCritique/frontend/node_modules/bootstrap/js/src/util/config.js"],"sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.3): util/config.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport { isElement, toType } from './index'\nimport Manipulator from '../dom/manipulator'\n\n/**\n * Class definition\n */\n\nclass Config {\n  // Getters\n  static get Default() {\n    return {}\n  }\n\n  static get DefaultType() {\n    return {}\n  }\n\n  static get NAME() {\n    throw new Error('You have to implement the static method \"NAME\", for each component!')\n  }\n\n  _getConfig(config) {\n    config = this._mergeConfigObj(config)\n    config = this._configAfterMerge(config)\n    this._typeCheckConfig(config)\n    return config\n  }\n\n  _configAfterMerge(config) {\n    return config\n  }\n\n  _mergeConfigObj(config, element) {\n    const jsonConfig = isElement(element) ? Manipulator.getDataAttribute(element, 'config') : {} // try to parse\n\n    return {\n      ...this.constructor.Default,\n      ...(typeof jsonConfig === 'object' ? jsonConfig : {}),\n      ...(isElement(element) ? Manipulator.getDataAttributes(element) : {}),\n      ...(typeof config === 'object' ? config : {})\n    }\n  }\n\n  _typeCheckConfig(config, configTypes = this.constructor.DefaultType) {\n    for (const property of Object.keys(configTypes)) {\n      const expectedTypes = configTypes[property]\n      const value = config[property]\n      const valueType = isElement(value) ? 'element' : toType(value)\n\n      if (!new RegExp(expectedTypes).test(valueType)) {\n        throw new TypeError(\n          `${this.constructor.NAME.toUpperCase()}: Option \"${property}\" provided type \"${valueType}\" but expected type \"${expectedTypes}\".`\n        )\n      }\n    }\n  }\n}\n\nexport default Config\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,SAAS,EAAEC,MAAM,QAAQ,SAAS;AAC3C,OAAOC,WAAW,MAAM,oBAAoB;;AAE5C;AACA;AACA;;AAEA,MAAMC,MAAM,CAAC;EACX;EACA,WAAWC,OAAO,GAAG;IACnB,OAAO,CAAC,CAAC;EACX;EAEA,WAAWC,WAAW,GAAG;IACvB,OAAO,CAAC,CAAC;EACX;EAEA,WAAWC,IAAI,GAAG;IAChB,MAAM,IAAIC,KAAK,CAAC,qEAAqE,CAAC;EACxF;EAEAC,UAAU,CAACC,MAAM,EAAE;IACjBA,MAAM,GAAG,IAAI,CAACC,eAAe,CAACD,MAAM,CAAC;IACrCA,MAAM,GAAG,IAAI,CAACE,iBAAiB,CAACF,MAAM,CAAC;IACvC,IAAI,CAACG,gBAAgB,CAACH,MAAM,CAAC;IAC7B,OAAOA,MAAM;EACf;EAEAE,iBAAiB,CAACF,MAAM,EAAE;IACxB,OAAOA,MAAM;EACf;EAEAC,eAAe,CAACD,MAAM,EAAEI,OAAO,EAAE;IAC/B,MAAMC,UAAU,GAAGd,SAAS,CAACa,OAAO,CAAC,GAAGX,WAAW,CAACa,gBAAgB,CAACF,OAAO,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAC;;IAE7F,OAAO;MACL,GAAG,IAAI,CAACG,WAAW,CAACZ,OAAO;MAC3B,IAAI,OAAOU,UAAU,KAAK,QAAQ,GAAGA,UAAU,GAAG,CAAC,CAAC,CAAC;MACrD,IAAId,SAAS,CAACa,OAAO,CAAC,GAAGX,WAAW,CAACe,iBAAiB,CAACJ,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;MACrE,IAAI,OAAOJ,MAAM,KAAK,QAAQ,GAAGA,MAAM,GAAG,CAAC,CAAC;IAC9C,CAAC;EACH;EAEAG,gBAAgB,CAACH,MAAM,EAA8C;IAAA,IAA5CS,WAAW,uEAAG,IAAI,CAACF,WAAW,CAACX,WAAW;IACjE,KAAK,MAAMc,QAAQ,IAAIC,MAAM,CAACC,IAAI,CAACH,WAAW,CAAC,EAAE;MAC/C,MAAMI,aAAa,GAAGJ,WAAW,CAACC,QAAQ,CAAC;MAC3C,MAAMI,KAAK,GAAGd,MAAM,CAACU,QAAQ,CAAC;MAC9B,MAAMK,SAAS,GAAGxB,SAAS,CAACuB,KAAK,CAAC,GAAG,SAAS,GAAGtB,MAAM,CAACsB,KAAK,CAAC;MAE9D,IAAI,CAAC,IAAIE,MAAM,CAACH,aAAa,CAAC,CAACI,IAAI,CAACF,SAAS,CAAC,EAAE;QAC9C,MAAM,IAAIG,SAAS,CAChB,GAAE,IAAI,CAACX,WAAW,CAACV,IAAI,CAACsB,WAAW,EAAG,aAAYT,QAAS,oBAAmBK,SAAU,wBAAuBF,aAAc,IAAG,CAClI;MACH;IACF;EACF;AACF;AAEA,eAAenB,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}