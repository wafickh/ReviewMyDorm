{"ast":null,"code":"/*!\n  * Bootstrap collapse.js v5.2.3 (https://getbootstrap.com/)\n  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('./util/index'), require('./dom/event-handler'), require('./dom/selector-engine'), require('./base-component')) : typeof define === 'function' && define.amd ? define(['./util/index', './dom/event-handler', './dom/selector-engine', './base-component'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Collapse = factory(global.Index, global.EventHandler, global.SelectorEngine, global.BaseComponent));\n})(this, function (index, EventHandler, SelectorEngine, BaseComponent) {\n  'use strict';\n\n  const _interopDefaultLegacy = e => e && typeof e === 'object' && 'default' in e ? e : {\n    default: e\n  };\n\n  const EventHandler__default = /*#__PURE__*/_interopDefaultLegacy(EventHandler);\n\n  const SelectorEngine__default = /*#__PURE__*/_interopDefaultLegacy(SelectorEngine);\n\n  const BaseComponent__default = /*#__PURE__*/_interopDefaultLegacy(BaseComponent);\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): collapse.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * Constants\n   */\n\n\n  const NAME = 'collapse';\n  const DATA_KEY = 'bs.collapse';\n  const EVENT_KEY = `.${DATA_KEY}`;\n  const DATA_API_KEY = '.data-api';\n  const EVENT_SHOW = `show${EVENT_KEY}`;\n  const EVENT_SHOWN = `shown${EVENT_KEY}`;\n  const EVENT_HIDE = `hide${EVENT_KEY}`;\n  const EVENT_HIDDEN = `hidden${EVENT_KEY}`;\n  const EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`;\n  const CLASS_NAME_SHOW = 'show';\n  const CLASS_NAME_COLLAPSE = 'collapse';\n  const CLASS_NAME_COLLAPSING = 'collapsing';\n  const CLASS_NAME_COLLAPSED = 'collapsed';\n  const CLASS_NAME_DEEPER_CHILDREN = `:scope .${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`;\n  const CLASS_NAME_HORIZONTAL = 'collapse-horizontal';\n  const WIDTH = 'width';\n  const HEIGHT = 'height';\n  const SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing';\n  const SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"collapse\"]';\n  const Default = {\n    parent: null,\n    toggle: true\n  };\n  const DefaultType = {\n    parent: '(null|element)',\n    toggle: 'boolean'\n  };\n  /**\n   * Class definition\n   */\n\n  class Collapse extends BaseComponent__default.default {\n    constructor(element, config) {\n      super(element, config);\n      this._isTransitioning = false;\n      this._triggerArray = [];\n      const toggleList = SelectorEngine__default.default.find(SELECTOR_DATA_TOGGLE);\n\n      for (const elem of toggleList) {\n        const selector = index.getSelectorFromElement(elem);\n        const filterElement = SelectorEngine__default.default.find(selector).filter(foundElement => foundElement === this._element);\n\n        if (selector !== null && filterElement.length) {\n          this._triggerArray.push(elem);\n        }\n      }\n\n      this._initializeChildren();\n\n      if (!this._config.parent) {\n        this._addAriaAndCollapsedClass(this._triggerArray, this._isShown());\n      }\n\n      if (this._config.toggle) {\n        this.toggle();\n      }\n    } // Getters\n\n\n    static get Default() {\n      return Default;\n    }\n\n    static get DefaultType() {\n      return DefaultType;\n    }\n\n    static get NAME() {\n      return NAME;\n    } // Public\n\n\n    toggle() {\n      if (this._isShown()) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    }\n\n    show() {\n      if (this._isTransitioning || this._isShown()) {\n        return;\n      }\n\n      let activeChildren = []; // find active children\n\n      if (this._config.parent) {\n        activeChildren = this._getFirstLevelChildren(SELECTOR_ACTIVES).filter(element => element !== this._element).map(element => Collapse.getOrCreateInstance(element, {\n          toggle: false\n        }));\n      }\n\n      if (activeChildren.length && activeChildren[0]._isTransitioning) {\n        return;\n      }\n\n      const startEvent = EventHandler__default.default.trigger(this._element, EVENT_SHOW);\n\n      if (startEvent.defaultPrevented) {\n        return;\n      }\n\n      for (const activeInstance of activeChildren) {\n        activeInstance.hide();\n      }\n\n      const dimension = this._getDimension();\n\n      this._element.classList.remove(CLASS_NAME_COLLAPSE);\n\n      this._element.classList.add(CLASS_NAME_COLLAPSING);\n\n      this._element.style[dimension] = 0;\n\n      this._addAriaAndCollapsedClass(this._triggerArray, true);\n\n      this._isTransitioning = true;\n\n      const complete = () => {\n        this._isTransitioning = false;\n\n        this._element.classList.remove(CLASS_NAME_COLLAPSING);\n\n        this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW);\n\n        this._element.style[dimension] = '';\n        EventHandler__default.default.trigger(this._element, EVENT_SHOWN);\n      };\n\n      const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);\n      const scrollSize = `scroll${capitalizedDimension}`;\n\n      this._queueCallback(complete, this._element, true);\n\n      this._element.style[dimension] = `${this._element[scrollSize]}px`;\n    }\n\n    hide() {\n      if (this._isTransitioning || !this._isShown()) {\n        return;\n      }\n\n      const startEvent = EventHandler__default.default.trigger(this._element, EVENT_HIDE);\n\n      if (startEvent.defaultPrevented) {\n        return;\n      }\n\n      const dimension = this._getDimension();\n\n      this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`;\n      index.reflow(this._element);\n\n      this._element.classList.add(CLASS_NAME_COLLAPSING);\n\n      this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW);\n\n      for (const trigger of this._triggerArray) {\n        const element = index.getElementFromSelector(trigger);\n\n        if (element && !this._isShown(element)) {\n          this._addAriaAndCollapsedClass([trigger], false);\n        }\n      }\n\n      this._isTransitioning = true;\n\n      const complete = () => {\n        this._isTransitioning = false;\n\n        this._element.classList.remove(CLASS_NAME_COLLAPSING);\n\n        this._element.classList.add(CLASS_NAME_COLLAPSE);\n\n        EventHandler__default.default.trigger(this._element, EVENT_HIDDEN);\n      };\n\n      this._element.style[dimension] = '';\n\n      this._queueCallback(complete, this._element, true);\n    }\n\n    _isShown(element = this._element) {\n      return element.classList.contains(CLASS_NAME_SHOW);\n    } // Private\n\n\n    _configAfterMerge(config) {\n      config.toggle = Boolean(config.toggle); // Coerce string values\n\n      config.parent = index.getElement(config.parent);\n      return config;\n    }\n\n    _getDimension() {\n      return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;\n    }\n\n    _initializeChildren() {\n      if (!this._config.parent) {\n        return;\n      }\n\n      const children = this._getFirstLevelChildren(SELECTOR_DATA_TOGGLE);\n\n      for (const element of children) {\n        const selected = index.getElementFromSelector(element);\n\n        if (selected) {\n          this._addAriaAndCollapsedClass([element], this._isShown(selected));\n        }\n      }\n    }\n\n    _getFirstLevelChildren(selector) {\n      const children = SelectorEngine__default.default.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent); // remove children if greater depth\n\n      return SelectorEngine__default.default.find(selector, this._config.parent).filter(element => !children.includes(element));\n    }\n\n    _addAriaAndCollapsedClass(triggerArray, isOpen) {\n      if (!triggerArray.length) {\n        return;\n      }\n\n      for (const element of triggerArray) {\n        element.classList.toggle(CLASS_NAME_COLLAPSED, !isOpen);\n        element.setAttribute('aria-expanded', isOpen);\n      }\n    } // Static\n\n\n    static jQueryInterface(config) {\n      const _config = {};\n\n      if (typeof config === 'string' && /show|hide/.test(config)) {\n        _config.toggle = false;\n      }\n\n      return this.each(function () {\n        const data = Collapse.getOrCreateInstance(this, _config);\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(`No method named \"${config}\"`);\n          }\n\n          data[config]();\n        }\n      });\n    }\n\n  }\n  /**\n   * Data API implementation\n   */\n\n\n  EventHandler__default.default.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n    // preventDefault only for <a> elements (which change the URL) not inside the collapsible element\n    if (event.target.tagName === 'A' || event.delegateTarget && event.delegateTarget.tagName === 'A') {\n      event.preventDefault();\n    }\n\n    const selector = index.getSelectorFromElement(this);\n    const selectorElements = SelectorEngine__default.default.find(selector);\n\n    for (const element of selectorElements) {\n      Collapse.getOrCreateInstance(element, {\n        toggle: false\n      }).toggle();\n    }\n  });\n  /**\n   * jQuery\n   */\n\n  index.defineJQueryPlugin(Collapse);\n  return Collapse;\n});","map":{"version":3,"sources":["../src/collapse.js"],"names":["NAME","DATA_KEY","EVENT_KEY","DATA_API_KEY","EVENT_SHOW","EVENT_SHOWN","EVENT_HIDE","EVENT_HIDDEN","EVENT_CLICK_DATA_API","CLASS_NAME_SHOW","CLASS_NAME_COLLAPSE","CLASS_NAME_COLLAPSING","CLASS_NAME_COLLAPSED","CLASS_NAME_DEEPER_CHILDREN","CLASS_NAME_HORIZONTAL","WIDTH","HEIGHT","SELECTOR_ACTIVES","SELECTOR_DATA_TOGGLE","Default","parent","toggle","DefaultType","BaseComponent","constructor","toggleList","SelectorEngine","selector","getSelectorFromElement","filterElement","foundElement","show","activeChildren","element","startEvent","EventHandler","activeInstance","dimension","complete","capitalizedDimension","scrollSize","hide","reflow","getElementFromSelector","_isShown","_configAfterMerge","config","Boolean","getElement","_getDimension","_initializeChildren","children","selected","_getFirstLevelChildren","_addAriaAndCollapsedClass","triggerArray","jQueryInterface","_config","data","Collapse","event","selectorElements","defineJQueryPlugin"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;;;;AAkBA;;;;;AAIA,QAAMA,IAAI,GAAV,UAAA;AACA,QAAMC,QAAQ,GAAd,aAAA;AACA,QAAMC,SAAS,GAAOD,IAAAA,QAAtB,EAAA;AACA,QAAME,YAAY,GAAlB,WAAA;AAEA,QAAMC,UAAU,GAAUF,OAAAA,SAA1B,EAAA;AACA,QAAMG,WAAW,GAAWH,QAAAA,SAA5B,EAAA;AACA,QAAMI,UAAU,GAAUJ,OAAAA,SAA1B,EAAA;AACA,QAAMK,YAAY,GAAYL,SAAAA,SAA9B,EAAA;AACA,QAAMM,oBAAoB,GAAI,QAAON,SAAU,GAAEC,YAAjD,EAAA;AAEA,QAAMM,eAAe,GAArB,MAAA;AACA,QAAMC,mBAAmB,GAAzB,UAAA;AACA,QAAMC,qBAAqB,GAA3B,YAAA;AACA,QAAMC,oBAAoB,GAA1B,WAAA;AACA,QAAMC,0BAA0B,GAAI,WAAUH,mBAAoB,KAAIA,mBAAtE,EAAA;AACA,QAAMI,qBAAqB,GAA3B,qBAAA;AAEA,QAAMC,KAAK,GAAX,OAAA;AACA,QAAMC,MAAM,GAAZ,QAAA;AAEA,QAAMC,gBAAgB,GAAtB,sCAAA;AACA,QAAMC,oBAAoB,GAA1B,6BAAA;AAEA,QAAMC,OAAO,GAAG;AACdC,IAAAA,MAAM,EADQ,IAAA;AAEdC,IAAAA,MAAM,EAAE;AAFM,GAAhB;AAKA,QAAMC,WAAW,GAAG;AAClBF,IAAAA,MAAM,EADY,gBAAA;AAElBC,IAAAA,MAAM,EAAE;AAFU,GAApB;AAKA;;;;AAIA,QAAA,QAAA,SAAuBE,sBAAAA,CAAvB,OAAA,CAAqC;AACnCC,IAAAA,WAAW,CAAA,OAAA,EAAA,MAAA,EAAkB;AAC3B,YAAA,OAAA,EAAA,MAAA;AAEA,WAAA,gBAAA,GAAA,KAAA;AACA,WAAA,aAAA,GAAA,EAAA;AAEA,YAAMC,UAAU,GAAGC,uBAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAnB,oBAAmBA,CAAnB;;AAEA,WAAK,MAAL,IAAA,IAAA,UAAA,EAA+B;AAC7B,cAAMC,QAAQ,GAAGC,KAAAA,CAAAA,sBAAAA,CAAjB,IAAiBA,CAAjB;AACA,cAAMC,aAAa,GAAGH,uBAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,QAAAA,EAAAA,MAAAA,CACZI,YAAY,IAAIA,YAAY,KAAK,KAD3C,QAAsBJ,CAAtB;;AAGA,YAAIC,QAAQ,KAARA,IAAAA,IAAqBE,aAAa,CAAtC,MAAA,EAA+C;AAC7C,eAAA,aAAA,CAAA,IAAA,CAAA,IAAA;AACD;AACF;;AAED,WAAA,mBAAA;;AAEA,UAAI,CAAC,KAAA,OAAA,CAAL,MAAA,EAA0B;AACxB,aAAA,yBAAA,CAA+B,KAA/B,aAAA,EAAmD,KAAnD,QAAmD,EAAnD;AACD;;AAED,UAAI,KAAA,OAAA,CAAJ,MAAA,EAAyB;AACvB,aAAA,MAAA;AACD;AA3BgC,KAAA,CAAA;;;AA+BjB,eAAPV,OAAO,GAAG;AACnB,aAAA,OAAA;AACD;;AAEqB,eAAXG,WAAW,GAAG;AACvB,aAAA,WAAA;AACD;;AAEc,eAAJtB,IAAI,GAAG;AAChB,aAAA,IAAA;AAxCiC,KAAA,CAAA;;;AA4CnCqB,IAAAA,MAAM,GAAG;AACP,UAAI,KAAJ,QAAI,EAAJ,EAAqB;AACnB,aAAA,IAAA;AADF,OAAA,MAEO;AACL,aAAA,IAAA;AACD;AACF;;AAEDU,IAAAA,IAAI,GAAG;AACL,UAAI,KAAA,gBAAA,IAAyB,KAA7B,QAA6B,EAA7B,EAA8C;AAC5C;AACD;;AAED,UAAIC,cAAc,GALb,EAKL,CALK,CAAA;;AAQL,UAAI,KAAA,OAAA,CAAJ,MAAA,EAAyB;AACvBA,QAAAA,cAAc,GAAG,KAAA,sBAAA,CAAA,gBAAA,EAAA,MAAA,CACPC,OAAO,IAAIA,OAAO,KAAK,KADhB,QAAA,EAAA,GAAA,CAEVA,OAAO,IAAI,QAAQ,CAAR,mBAAA,CAAA,OAAA,EAAsC;AAAEZ,UAAAA,MAAM,EAAE;AAAV,SAAtC,CAFD,CAAjBW;AAGD;;AAED,UAAIA,cAAc,CAAdA,MAAAA,IAAyBA,cAAc,CAAdA,CAAc,CAAdA,CAA7B,gBAAA,EAAiE;AAC/D;AACD;;AAED,YAAME,UAAU,GAAGC,qBAAAA,CAAAA,OAAAA,CAAAA,OAAAA,CAAqB,KAArBA,QAAAA,EAAnB,UAAmBA,CAAnB;;AACA,UAAID,UAAU,CAAd,gBAAA,EAAiC;AAC/B;AACD;;AAED,WAAK,MAAL,cAAA,IAAA,cAAA,EAA6C;AAC3CE,QAAAA,cAAc,CAAdA,IAAAA;AACD;;AAED,YAAMC,SAAS,GAAG,KAAlB,aAAkB,EAAlB;;AAEA,WAAA,QAAA,CAAA,SAAA,CAAA,MAAA,CAAA,mBAAA;;AACA,WAAA,QAAA,CAAA,SAAA,CAAA,GAAA,CAAA,qBAAA;;AAEA,WAAA,QAAA,CAAA,KAAA,CAAA,SAAA,IAAA,CAAA;;AAEA,WAAA,yBAAA,CAA+B,KAA/B,aAAA,EAAA,IAAA;;AACA,WAAA,gBAAA,GAAA,IAAA;;AAEA,YAAMC,QAAQ,GAAG,MAAM;AACrB,aAAA,gBAAA,GAAA,KAAA;;AAEA,aAAA,QAAA,CAAA,SAAA,CAAA,MAAA,CAAA,qBAAA;;AACA,aAAA,QAAA,CAAA,SAAA,CAAA,GAAA,CAAA,mBAAA,EAAA,eAAA;;AAEA,aAAA,QAAA,CAAA,KAAA,CAAA,SAAA,IAAA,EAAA;AAEAH,QAAAA,qBAAAA,CAAAA,OAAAA,CAAAA,OAAAA,CAAqB,KAArBA,QAAAA,EAAAA,WAAAA;AARF,OAAA;;AAWA,YAAMI,oBAAoB,GAAGF,SAAS,CAATA,CAAS,CAATA,CAAAA,WAAAA,KAA6BA,SAAS,CAATA,KAAAA,CAA1D,CAA0DA,CAA1D;AACA,YAAMG,UAAU,GAAYD,SAAAA,oBAA5B,EAAA;;AAEA,WAAA,cAAA,CAAA,QAAA,EAA8B,KAA9B,QAAA,EAAA,IAAA;;AACA,WAAA,QAAA,CAAA,KAAA,CAAA,SAAA,IAAoC,GAAA,KAAA,QAAA,CAAA,UAAA,CAApC,IAAA;AACD;;AAEDE,IAAAA,IAAI,GAAG;AACL,UAAI,KAAA,gBAAA,IAAyB,CAAC,KAA9B,QAA8B,EAA9B,EAA+C;AAC7C;AACD;;AAED,YAAMP,UAAU,GAAGC,qBAAAA,CAAAA,OAAAA,CAAAA,OAAAA,CAAqB,KAArBA,QAAAA,EAAnB,UAAmBA,CAAnB;;AACA,UAAID,UAAU,CAAd,gBAAA,EAAiC;AAC/B;AACD;;AAED,YAAMG,SAAS,GAAG,KAAlB,aAAkB,EAAlB;;AAEA,WAAA,QAAA,CAAA,KAAA,CAAA,SAAA,IAAkC,GAAE,KAAA,QAAA,CAAA,qBAAA,GAAA,SAAA,CAApC,IAAA;AAEAK,MAAAA,KAAAA,CAAAA,MAAAA,CAAO,KAAPA,QAAAA;;AAEA,WAAA,QAAA,CAAA,SAAA,CAAA,GAAA,CAAA,qBAAA;;AACA,WAAA,QAAA,CAAA,SAAA,CAAA,MAAA,CAAA,mBAAA,EAAA,eAAA;;AAEA,WAAK,MAAL,OAAA,IAAsB,KAAtB,aAAA,EAA0C;AACxC,cAAMT,OAAO,GAAGU,KAAAA,CAAAA,sBAAAA,CAAhB,OAAgBA,CAAhB;;AAEA,YAAIV,OAAO,IAAI,CAAC,KAAA,QAAA,CAAhB,OAAgB,CAAhB,EAAwC;AACtC,eAAA,yBAAA,CAA+B,CAA/B,OAA+B,CAA/B,EAAA,KAAA;AACD;AACF;;AAED,WAAA,gBAAA,GAAA,IAAA;;AAEA,YAAMK,QAAQ,GAAG,MAAM;AACrB,aAAA,gBAAA,GAAA,KAAA;;AACA,aAAA,QAAA,CAAA,SAAA,CAAA,MAAA,CAAA,qBAAA;;AACA,aAAA,QAAA,CAAA,SAAA,CAAA,GAAA,CAAA,mBAAA;;AACAH,QAAAA,qBAAAA,CAAAA,OAAAA,CAAAA,OAAAA,CAAqB,KAArBA,QAAAA,EAAAA,YAAAA;AAJF,OAAA;;AAOA,WAAA,QAAA,CAAA,KAAA,CAAA,SAAA,IAAA,EAAA;;AAEA,WAAA,cAAA,CAAA,QAAA,EAA8B,KAA9B,QAAA,EAAA,IAAA;AACD;;AAEDS,IAAAA,QAAQ,CAACX,OAAO,GAAG,KAAX,QAAA,EAA0B;AAChC,aAAOA,OAAO,CAAPA,SAAAA,CAAAA,QAAAA,CAAP,eAAOA,CAAP;AArJiC,KAAA,CAAA;;;AAyJnCY,IAAAA,iBAAiB,CAAA,MAAA,EAAS;AACxBC,MAAAA,MAAM,CAANA,MAAAA,GAAgBC,OAAO,CAACD,MAAM,CADN,MACD,CAAvBA,CADwB,CAAA;;AAExBA,MAAAA,MAAM,CAANA,MAAAA,GAAgBE,KAAAA,CAAAA,UAAAA,CAAWF,MAAM,CAAjCA,MAAgBE,CAAhBF;AACA,aAAA,MAAA;AACD;;AAEDG,IAAAA,aAAa,GAAG;AACd,aAAO,KAAA,QAAA,CAAA,SAAA,CAAA,QAAA,CAAA,qBAAA,IAAA,KAAA,GAAP,MAAA;AACD;;AAEDC,IAAAA,mBAAmB,GAAG;AACpB,UAAI,CAAC,KAAA,OAAA,CAAL,MAAA,EAA0B;AACxB;AACD;;AAED,YAAMC,QAAQ,GAAG,KAAA,sBAAA,CAAjB,oBAAiB,CAAjB;;AAEA,WAAK,MAAL,OAAA,IAAA,QAAA,EAAgC;AAC9B,cAAMC,QAAQ,GAAGT,KAAAA,CAAAA,sBAAAA,CAAjB,OAAiBA,CAAjB;;AAEA,YAAA,QAAA,EAAc;AACZ,eAAA,yBAAA,CAA+B,CAA/B,OAA+B,CAA/B,EAA0C,KAAA,QAAA,CAA1C,QAA0C,CAA1C;AACD;AACF;AACF;;AAEDU,IAAAA,sBAAsB,CAAA,QAAA,EAAW;AAC/B,YAAMF,QAAQ,GAAGzB,uBAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,0BAAAA,EAAgD,KAAA,OAAA,CADlC,MACdA,CAAjB,CAD+B,CAAA;;AAG/B,aAAOA,uBAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,QAAAA,EAA8B,KAAA,OAAA,CAA9BA,MAAAA,EAAAA,MAAAA,CAA0DO,OAAO,IAAI,CAACkB,QAAQ,CAARA,QAAAA,CAA7E,OAA6EA,CAAtEzB,CAAP;AACD;;AAED4B,IAAAA,yBAAyB,CAAA,YAAA,EAAA,MAAA,EAAuB;AAC9C,UAAI,CAACC,YAAY,CAAjB,MAAA,EAA0B;AACxB;AACD;;AAED,WAAK,MAAL,OAAA,IAAA,YAAA,EAAoC;AAClCtB,QAAAA,OAAO,CAAPA,SAAAA,CAAAA,MAAAA,CAAAA,oBAAAA,EAA+C,CAA/CA,MAAAA;AACAA,QAAAA,OAAO,CAAPA,YAAAA,CAAAA,eAAAA,EAAAA,MAAAA;AACD;AAjMgC,KAAA,CAAA;;;AAqMb,WAAfuB,eAAe,CAAA,MAAA,EAAS;AAC7B,YAAMC,OAAO,GAAb,EAAA;;AACA,UAAI,OAAA,MAAA,KAAA,QAAA,IAA8B,YAAA,IAAA,CAAlC,MAAkC,CAAlC,EAA4D;AAC1DA,QAAAA,OAAO,CAAPA,MAAAA,GAAAA,KAAAA;AACD;;AAED,aAAO,KAAA,IAAA,CAAU,YAAY;AAC3B,cAAMC,IAAI,GAAGC,QAAQ,CAARA,mBAAAA,CAAAA,IAAAA,EAAb,OAAaA,CAAb;;AAEA,YAAI,OAAA,MAAA,KAAJ,QAAA,EAAgC;AAC9B,cAAI,OAAOD,IAAI,CAAX,MAAW,CAAX,KAAJ,WAAA,EAAyC;AACvC,kBAAM,IAAA,SAAA,CAAkCZ,oBAAAA,MAAxC,GAAM,CAAN;AACD;;AAEDY,UAAAA,IAAI,CAAJA,MAAI,CAAJA;AACD;AATH,OAAO,CAAP;AAWD;;AAtNkC;AAyNrC;;;;;AAIAvB,EAAAA,qBAAAA,CAAAA,OAAAA,CAAAA,EAAAA,CAAAA,QAAAA,EAAAA,oBAAAA,EAAAA,oBAAAA,EAAsE,UAAA,KAAA,EAAiB;AACrF;AACA,QAAIyB,KAAK,CAALA,MAAAA,CAAAA,OAAAA,KAAAA,GAAAA,IAAiCA,KAAK,CAALA,cAAAA,IAAwBA,KAAK,CAALA,cAAAA,CAAAA,OAAAA,KAA7D,GAAA,EAAoG;AAClGA,MAAAA,KAAK,CAALA,cAAAA;AACD;;AAED,UAAMjC,QAAQ,GAAGC,KAAAA,CAAAA,sBAAAA,CAAjB,IAAiBA,CAAjB;AACA,UAAMiC,gBAAgB,GAAGnC,uBAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAzB,QAAyBA,CAAzB;;AAEA,SAAK,MAAL,OAAA,IAAA,gBAAA,EAAwC;AACtCiC,MAAAA,QAAQ,CAARA,mBAAAA,CAAAA,OAAAA,EAAsC;AAAEtC,QAAAA,MAAM,EAAE;AAAV,OAAtCsC,EAAAA,MAAAA;AACD;AAXHxB,GAAAA;AAcA;;;;AAIA2B,EAAAA,KAAAA,CAAAA,kBAAAA,CAAAA,QAAAA","sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.3): collapse.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport {\n  defineJQueryPlugin,\n  getElement,\n  getElementFromSelector,\n  getSelectorFromElement,\n  reflow\n} from './util/index'\nimport EventHandler from './dom/event-handler'\nimport SelectorEngine from './dom/selector-engine'\nimport BaseComponent from './base-component'\n\n/**\n * Constants\n */\n\nconst NAME = 'collapse'\nconst DATA_KEY = 'bs.collapse'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst DATA_API_KEY = '.data-api'\n\nconst EVENT_SHOW = `show${EVENT_KEY}`\nconst EVENT_SHOWN = `shown${EVENT_KEY}`\nconst EVENT_HIDE = `hide${EVENT_KEY}`\nconst EVENT_HIDDEN = `hidden${EVENT_KEY}`\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`\n\nconst CLASS_NAME_SHOW = 'show'\nconst CLASS_NAME_COLLAPSE = 'collapse'\nconst CLASS_NAME_COLLAPSING = 'collapsing'\nconst CLASS_NAME_COLLAPSED = 'collapsed'\nconst CLASS_NAME_DEEPER_CHILDREN = `:scope .${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`\nconst CLASS_NAME_HORIZONTAL = 'collapse-horizontal'\n\nconst WIDTH = 'width'\nconst HEIGHT = 'height'\n\nconst SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing'\nconst SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"collapse\"]'\n\nconst Default = {\n  parent: null,\n  toggle: true\n}\n\nconst DefaultType = {\n  parent: '(null|element)',\n  toggle: 'boolean'\n}\n\n/**\n * Class definition\n */\n\nclass Collapse extends BaseComponent {\n  constructor(element, config) {\n    super(element, config)\n\n    this._isTransitioning = false\n    this._triggerArray = []\n\n    const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE)\n\n    for (const elem of toggleList) {\n      const selector = getSelectorFromElement(elem)\n      const filterElement = SelectorEngine.find(selector)\n        .filter(foundElement => foundElement === this._element)\n\n      if (selector !== null && filterElement.length) {\n        this._triggerArray.push(elem)\n      }\n    }\n\n    this._initializeChildren()\n\n    if (!this._config.parent) {\n      this._addAriaAndCollapsedClass(this._triggerArray, this._isShown())\n    }\n\n    if (this._config.toggle) {\n      this.toggle()\n    }\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  toggle() {\n    if (this._isShown()) {\n      this.hide()\n    } else {\n      this.show()\n    }\n  }\n\n  show() {\n    if (this._isTransitioning || this._isShown()) {\n      return\n    }\n\n    let activeChildren = []\n\n    // find active children\n    if (this._config.parent) {\n      activeChildren = this._getFirstLevelChildren(SELECTOR_ACTIVES)\n        .filter(element => element !== this._element)\n        .map(element => Collapse.getOrCreateInstance(element, { toggle: false }))\n    }\n\n    if (activeChildren.length && activeChildren[0]._isTransitioning) {\n      return\n    }\n\n    const startEvent = EventHandler.trigger(this._element, EVENT_SHOW)\n    if (startEvent.defaultPrevented) {\n      return\n    }\n\n    for (const activeInstance of activeChildren) {\n      activeInstance.hide()\n    }\n\n    const dimension = this._getDimension()\n\n    this._element.classList.remove(CLASS_NAME_COLLAPSE)\n    this._element.classList.add(CLASS_NAME_COLLAPSING)\n\n    this._element.style[dimension] = 0\n\n    this._addAriaAndCollapsedClass(this._triggerArray, true)\n    this._isTransitioning = true\n\n    const complete = () => {\n      this._isTransitioning = false\n\n      this._element.classList.remove(CLASS_NAME_COLLAPSING)\n      this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW)\n\n      this._element.style[dimension] = ''\n\n      EventHandler.trigger(this._element, EVENT_SHOWN)\n    }\n\n    const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1)\n    const scrollSize = `scroll${capitalizedDimension}`\n\n    this._queueCallback(complete, this._element, true)\n    this._element.style[dimension] = `${this._element[scrollSize]}px`\n  }\n\n  hide() {\n    if (this._isTransitioning || !this._isShown()) {\n      return\n    }\n\n    const startEvent = EventHandler.trigger(this._element, EVENT_HIDE)\n    if (startEvent.defaultPrevented) {\n      return\n    }\n\n    const dimension = this._getDimension()\n\n    this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`\n\n    reflow(this._element)\n\n    this._element.classList.add(CLASS_NAME_COLLAPSING)\n    this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW)\n\n    for (const trigger of this._triggerArray) {\n      const element = getElementFromSelector(trigger)\n\n      if (element && !this._isShown(element)) {\n        this._addAriaAndCollapsedClass([trigger], false)\n      }\n    }\n\n    this._isTransitioning = true\n\n    const complete = () => {\n      this._isTransitioning = false\n      this._element.classList.remove(CLASS_NAME_COLLAPSING)\n      this._element.classList.add(CLASS_NAME_COLLAPSE)\n      EventHandler.trigger(this._element, EVENT_HIDDEN)\n    }\n\n    this._element.style[dimension] = ''\n\n    this._queueCallback(complete, this._element, true)\n  }\n\n  _isShown(element = this._element) {\n    return element.classList.contains(CLASS_NAME_SHOW)\n  }\n\n  // Private\n  _configAfterMerge(config) {\n    config.toggle = Boolean(config.toggle) // Coerce string values\n    config.parent = getElement(config.parent)\n    return config\n  }\n\n  _getDimension() {\n    return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT\n  }\n\n  _initializeChildren() {\n    if (!this._config.parent) {\n      return\n    }\n\n    const children = this._getFirstLevelChildren(SELECTOR_DATA_TOGGLE)\n\n    for (const element of children) {\n      const selected = getElementFromSelector(element)\n\n      if (selected) {\n        this._addAriaAndCollapsedClass([element], this._isShown(selected))\n      }\n    }\n  }\n\n  _getFirstLevelChildren(selector) {\n    const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent)\n    // remove children if greater depth\n    return SelectorEngine.find(selector, this._config.parent).filter(element => !children.includes(element))\n  }\n\n  _addAriaAndCollapsedClass(triggerArray, isOpen) {\n    if (!triggerArray.length) {\n      return\n    }\n\n    for (const element of triggerArray) {\n      element.classList.toggle(CLASS_NAME_COLLAPSED, !isOpen)\n      element.setAttribute('aria-expanded', isOpen)\n    }\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    const _config = {}\n    if (typeof config === 'string' && /show|hide/.test(config)) {\n      _config.toggle = false\n    }\n\n    return this.each(function () {\n      const data = Collapse.getOrCreateInstance(this, _config)\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`)\n        }\n\n        data[config]()\n      }\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nEventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n  // preventDefault only for <a> elements (which change the URL) not inside the collapsible element\n  if (event.target.tagName === 'A' || (event.delegateTarget && event.delegateTarget.tagName === 'A')) {\n    event.preventDefault()\n  }\n\n  const selector = getSelectorFromElement(this)\n  const selectorElements = SelectorEngine.find(selector)\n\n  for (const element of selectorElements) {\n    Collapse.getOrCreateInstance(element, { toggle: false }).toggle()\n  }\n})\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Collapse)\n\nexport default Collapse\n"]},"metadata":{},"sourceType":"script"}