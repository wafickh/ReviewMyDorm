{"ast":null,"code":"import * as React from 'react';\nimport { useEffect } from 'react';\nimport { applyReactStyle } from '../utils/apply-react-style';\nimport useControl from './use-control';\nconst defaultProps = {\n  unit: 'metric',\n  maxWidth: 100\n};\n\nfunction ScaleControl(props) {\n  const ctrl = useControl(({\n    mapLib\n  }) => new mapLib.ScaleControl(props), {\n    position: props.position\n  }); // @ts-ignore\n\n  if (ctrl.options.unit !== props.unit || ctrl.options.maxWidth !== props.maxWidth) {\n    // @ts-ignore\n    ctrl.options.maxWidth = props.maxWidth; // This method will trigger an update\n\n    ctrl.setUnit(props.unit);\n  }\n\n  useEffect(() => {\n    // @ts-ignore\n    applyReactStyle(ctrl._container, props.style);\n  }, [props.style]);\n  return null;\n}\n\nScaleControl.defaultProps = defaultProps;\nexport default React.memo(ScaleControl);","map":{"version":3,"sources":["../../../src/components/scale-control.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAQ,SAAR,QAAwB,OAAxB;AACA,SAAQ,eAAR,QAA8B,4BAA9B;AACA,OAAO,UAAP,MAAuB,eAAvB;AAmBA,MAAM,YAAY,GAAsB;AACtC,EAAA,IAAI,EAAE,QADgC;AAEtC,EAAA,QAAQ,EAAE;AAF4B,CAAxC;;AAKA,SAAS,YAAT,CAAsB,KAAtB,EAA8C;AAC5C,QAAM,IAAI,GAAG,UAAU,CAAqB,CAAC;AAAC,IAAA;AAAD,GAAD,KAAc,IAAI,MAAM,CAAC,YAAX,CAAwB,KAAxB,CAAnC,EAAmE;AACxF,IAAA,QAAQ,EAAE,KAAK,CAAC;AADwE,GAAnE,CAAvB,CAD4C,CAK5C;;AACA,MAAI,IAAI,CAAC,OAAL,CAAa,IAAb,KAAsB,KAAK,CAAC,IAA5B,IAAoC,IAAI,CAAC,OAAL,CAAa,QAAb,KAA0B,KAAK,CAAC,QAAxE,EAAkF;AAChF;AACA,IAAA,IAAI,CAAC,OAAL,CAAa,QAAb,GAAwB,KAAK,CAAC,QAA9B,CAFgF,CAGhF;;AACA,IAAA,IAAI,CAAC,OAAL,CAAa,KAAK,CAAC,IAAnB;AACD;;AAED,EAAA,SAAS,CAAC,MAAK;AACb;AACA,IAAA,eAAe,CAAC,IAAI,CAAC,UAAN,EAAkB,KAAK,CAAC,KAAxB,CAAf;AACD,GAHQ,EAGN,CAAC,KAAK,CAAC,KAAP,CAHM,CAAT;AAKA,SAAO,IAAP;AACD;;AAED,YAAY,CAAC,YAAb,GAA4B,YAA5B;AAEA,eAAe,KAAK,CAAC,IAAN,CAAW,YAAX,CAAf","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport { useEffect } from 'react';\nimport { applyReactStyle } from '../utils/apply-react-style';\nimport useControl from './use-control';\nconst defaultProps = {\n    unit: 'metric',\n    maxWidth: 100\n};\nfunction ScaleControl(props) {\n    const ctrl = useControl(({ mapLib }) => new mapLib.ScaleControl(props), {\n        position: props.position\n    });\n    // @ts-ignore\n    if (ctrl.options.unit !== props.unit || ctrl.options.maxWidth !== props.maxWidth) {\n        // @ts-ignore\n        ctrl.options.maxWidth = props.maxWidth;\n        // This method will trigger an update\n        ctrl.setUnit(props.unit);\n    }\n    useEffect(() => {\n        // @ts-ignore\n        applyReactStyle(ctrl._container, props.style);\n    }, [props.style]);\n    return null;\n}\nScaleControl.defaultProps = defaultProps;\nexport default React.memo(ScaleControl);\n//# sourceMappingURL=scale-control.js.map"]},"metadata":{},"sourceType":"module"}